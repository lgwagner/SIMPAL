/*
 * generated by Xtext
 */
package com.rockwellcollins.atc.formatting;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

import com.google.inject.Inject;
import com.rockwellcollins.atc.services.LimpGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class LimpFormatter extends AbstractDeclarativeFormatter {
	
	@Inject
	private LimpGrammarAccess g; 
	
	/**
	 * This class defines the rules for formatting, and essentially functions
	 * as a set of rules for PrettyPrinting for XText.
	 */
	@Override
	protected void configureFormatting(FormattingConfig c) {
		
		c.setAutoLinewrap(120);
		
		c.setLinewrap(0, 1, 2).before(g.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(g.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(g.getML_COMMENTRule());
		
		
		c.setLinewrap(2).after(g.getDeclarationRule());
		
		//how to print attribute blocks
		c.setLinewrap().before(g.getAttributeBlockRule());
		c.setIndentationIncrement().after(g.getAttributeBlockAccess().getLeftCurlyBracketKeyword_0_2());
		c.setLinewrap().after(g.getAttributeBlockAccess().getLeftCurlyBracketKeyword_0_2());
		c.setLinewrap().after(g.getAttributeRule());
		c.setIndentationDecrement().before(g.getAttributeBlockAccess().getRightCurlyBracketKeyword_0_4());
		c.setLinewrap().before(g.getAttributeBlockAccess().getRightCurlyBracketKeyword_0_4());
		
		//how to print var blocks
		c.setLinewrap().before(g.getVarBlockRule());
		c.setIndentationIncrement().after(g.getVarBlockAccess().getLeftCurlyBracketKeyword_0_2());
		c.setLinewrap().after(g.getVarBlockAccess().getLeftCurlyBracketKeyword_0_2());
		c.setLinewrap().after(g.getLocalArgRule());
		c.setIndentationDecrement().before(g.getVarBlockAccess().getRightCurlyBracketKeyword_0_4());
		c.setLinewrap().before(g.getVarBlockAccess().getRightCurlyBracketKeyword_0_4());
		
		//how to print statement blocks
		c.setLinewrap().before(g.getStatementBlockRule());
		c.setIndentationIncrement().after(g.getStatementBlockAccess().getLeftCurlyBracketKeyword_1());
		c.setLinewrap().after(g.getStatementBlockAccess().getLeftCurlyBracketKeyword_1());
		c.setLinewrap().after(g.getStatementRule());
		c.setIndentationDecrement().before(g.getStatementBlockAccess().getRightCurlyBracketKeyword_3());
		c.setLinewrap().before(g.getStatementBlockAccess().getRightCurlyBracketKeyword_3());
		
		//how to print if-then-else
		c.setLinewrap().after(g.getIfThenElseStatementAccess().getThenKeyword_2());
		c.setLinewrap().after(g.getElseRule());
		
		c.setLinewrap(2).before(g.getLabelStatementRule());

		for(Keyword comma : g.findKeywords(",")) {
			c.setNoSpace().before(comma);
		}
		
		for(Keyword semicolon : g.findKeywords(";")) {
			c.setNoSpace().before(semicolon);
		}
		
		for(Keyword period : g.findKeywords(".")) {
			c.setNoSpace().around(period);
		}
		
		for(Keyword openParen : g.findKeywords("(")) {
			c.setNoSpace().after(openParen);
		}

		for(Keyword closeParen : g.findKeywords(")")) {
			c.setNoSpace().before(closeParen);
		}
	}
}
