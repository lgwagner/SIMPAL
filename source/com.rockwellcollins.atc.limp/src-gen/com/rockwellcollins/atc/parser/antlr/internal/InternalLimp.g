/*
 * generated by Xtext
 */
grammar InternalLimp;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.rockwellcollins.atc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.rockwellcollins.atc.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.rockwellcollins.atc.services.LimpGrammarAccess;

}

@parser::members {

 	private LimpGrammarAccess grammarAccess;
 	
    public InternalLimpParser(TokenStream input, LimpGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Specification";	
   	}
   	
   	@Override
   	protected LimpGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSpecification
entryRuleSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecificationRule()); }
	 iv_ruleSpecification=ruleSpecification 
	 { $current=$iv_ruleSpecification.current; } 
	 EOF 
;

// Rule Specification
ruleSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getDeclarationsDeclarationParserRuleCall_0()); 
	    }
		lv_declarations_0_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_0_0, 
        		"com.rockwellcollins.atc.Limp.Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getImportParserRuleCall_0()); 
    }
    this_Import_0=ruleImport
    { 
        $current = $this_Import_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getCommentParserRuleCall_1()); 
    }
    this_Comment_1=ruleComment
    { 
        $current = $this_Comment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getExternalFunctionParserRuleCall_2()); 
    }
    this_ExternalFunction_2=ruleExternalFunction
    { 
        $current = $this_ExternalFunction_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getExternalProcedureParserRuleCall_3()); 
    }
    this_ExternalProcedure_3=ruleExternalProcedure
    { 
        $current = $this_ExternalProcedure_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getLocalFunctionParserRuleCall_4()); 
    }
    this_LocalFunction_4=ruleLocalFunction
    { 
        $current = $this_LocalFunction_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getLocalProcedureParserRuleCall_5()); 
    }
    this_LocalProcedure_5=ruleLocalProcedure
    { 
        $current = $this_LocalProcedure_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getConstantDeclarationParserRuleCall_6()); 
    }
    this_ConstantDeclaration_6=ruleConstantDeclaration
    { 
        $current = $this_ConstantDeclaration_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getGlobalDeclarationParserRuleCall_7()); 
    }
    this_GlobalDeclaration_7=ruleGlobalDeclaration
    { 
        $current = $this_GlobalDeclaration_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getTypeDeclarationParserRuleCall_8()); 
    }
    this_TypeDeclaration_8=ruleTypeDeclaration
    { 
        $current = $this_TypeDeclaration_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	 iv_ruleComment=ruleComment 
	 { $current=$iv_ruleComment.current; } 
	 EOF 
;

// Rule Comment
ruleComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_comment_0_0=RULE_SEMANTIC_COMMENT
		{
			newLeafNode(lv_comment_0_0, grammarAccess.getCommentAccess().getCommentSEMANTIC_COMMENTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"com.rockwellcollins.atc.Limp.SEMANTIC_COMMENT");
	    }

)
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"com.rockwellcollins.atc.Limp.STRING");
	    }

)
))
;





// Entry rule entryRuleExternalFunction
entryRuleExternalFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExternalFunctionRule()); }
	 iv_ruleExternalFunction=ruleExternalFunction 
	 { $current=$iv_ruleExternalFunction.current; } 
	 EOF 
;

// Rule ExternalFunction
ruleExternalFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='external' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExternalFunctionAccess().getExternalKeyword_0());
    }
	otherlv_1='function' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExternalFunctionAccess().getFunctionKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getExternalFunctionAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExternalFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExternalFunctionAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExternalFunctionAccess().getInputsInputArgListParserRuleCall_4_0()); 
	    }
		lv_inputs_4_0=ruleInputArgList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExternalFunctionRule());
	        }
       		set(
       			$current, 
       			"inputs",
        		lv_inputs_4_0, 
        		"com.rockwellcollins.atc.Limp.InputArgList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExternalFunctionAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6='returns' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExternalFunctionAccess().getReturnsKeyword_6());
    }
	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExternalFunctionAccess().getLeftParenthesisKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExternalFunctionAccess().getOutputOutputArgParserRuleCall_8_0()); 
	    }
		lv_output_8_0=ruleOutputArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExternalFunctionRule());
	        }
       		set(
       			$current, 
       			"output",
        		lv_output_8_0, 
        		"com.rockwellcollins.atc.Limp.OutputArg");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getExternalFunctionAccess().getRightParenthesisKeyword_9());
    }
)
;





// Entry rule entryRuleExternalProcedure
entryRuleExternalProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExternalProcedureRule()); }
	 iv_ruleExternalProcedure=ruleExternalProcedure 
	 { $current=$iv_ruleExternalProcedure.current; } 
	 EOF 
;

// Rule ExternalProcedure
ruleExternalProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='external' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExternalProcedureAccess().getExternalKeyword_0());
    }
	otherlv_1='procedure' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExternalProcedureAccess().getProcedureKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getExternalProcedureAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExternalProcedureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExternalProcedureAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExternalProcedureAccess().getInputsInputArgListParserRuleCall_4_0()); 
	    }
		lv_inputs_4_0=ruleInputArgList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExternalProcedureRule());
	        }
       		set(
       			$current, 
       			"inputs",
        		lv_inputs_4_0, 
        		"com.rockwellcollins.atc.Limp.InputArgList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExternalProcedureAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6='returns' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExternalProcedureAccess().getReturnsKeyword_6());
    }
	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExternalProcedureAccess().getLeftParenthesisKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExternalProcedureAccess().getOutputsOutputArgListParserRuleCall_8_0()); 
	    }
		lv_outputs_8_0=ruleOutputArgList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExternalProcedureRule());
	        }
       		set(
       			$current, 
       			"outputs",
        		lv_outputs_8_0, 
        		"com.rockwellcollins.atc.Limp.OutputArgList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getExternalProcedureAccess().getRightParenthesisKeyword_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExternalProcedureAccess().getAttributeBlockAttributeBlockParserRuleCall_10_0()); 
	    }
		lv_attributeBlock_10_0=ruleAttributeBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExternalProcedureRule());
	        }
       		set(
       			$current, 
       			"attributeBlock",
        		lv_attributeBlock_10_0, 
        		"com.rockwellcollins.atc.Limp.AttributeBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLocalFunction
entryRuleLocalFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalFunctionRule()); }
	 iv_ruleLocalFunction=ruleLocalFunction 
	 { $current=$iv_ruleLocalFunction.current; } 
	 EOF 
;

// Rule LocalFunction
ruleLocalFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocalFunctionAccess().getFunctionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLocalFunctionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalFunctionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalFunctionAccess().getInputsInputArgListParserRuleCall_3_0()); 
	    }
		lv_inputs_3_0=ruleInputArgList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalFunctionRule());
	        }
       		set(
       			$current, 
       			"inputs",
        		lv_inputs_3_0, 
        		"com.rockwellcollins.atc.Limp.InputArgList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLocalFunctionAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5='returns' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLocalFunctionAccess().getReturnsKeyword_5());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLocalFunctionAccess().getLeftParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalFunctionAccess().getOutputOutputArgParserRuleCall_7_0()); 
	    }
		lv_output_7_0=ruleOutputArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalFunctionRule());
	        }
       		set(
       			$current, 
       			"output",
        		lv_output_7_0, 
        		"com.rockwellcollins.atc.Limp.OutputArg");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLocalFunctionAccess().getRightParenthesisKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalFunctionAccess().getVarBlockVarBlockParserRuleCall_9_0()); 
	    }
		lv_varBlock_9_0=ruleVarBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalFunctionRule());
	        }
       		set(
       			$current, 
       			"varBlock",
        		lv_varBlock_9_0, 
        		"com.rockwellcollins.atc.Limp.VarBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='equations' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getLocalFunctionAccess().getEquationsKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalFunctionAccess().getEquationBlockEquationBlockParserRuleCall_11_0()); 
	    }
		lv_equationBlock_11_0=ruleEquationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalFunctionRule());
	        }
       		set(
       			$current, 
       			"equationBlock",
        		lv_equationBlock_11_0, 
        		"com.rockwellcollins.atc.Limp.EquationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLocalProcedure
entryRuleLocalProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalProcedureRule()); }
	 iv_ruleLocalProcedure=ruleLocalProcedure 
	 { $current=$iv_ruleLocalProcedure.current; } 
	 EOF 
;

// Rule LocalProcedure
ruleLocalProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='procedure' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocalProcedureAccess().getProcedureKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLocalProcedureAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalProcedureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalProcedureAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalProcedureAccess().getInputsInputArgListParserRuleCall_3_0()); 
	    }
		lv_inputs_3_0=ruleInputArgList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalProcedureRule());
	        }
       		set(
       			$current, 
       			"inputs",
        		lv_inputs_3_0, 
        		"com.rockwellcollins.atc.Limp.InputArgList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLocalProcedureAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5='returns' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLocalProcedureAccess().getReturnsKeyword_5());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLocalProcedureAccess().getLeftParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalProcedureAccess().getOutputsOutputArgListParserRuleCall_7_0()); 
	    }
		lv_outputs_7_0=ruleOutputArgList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalProcedureRule());
	        }
       		set(
       			$current, 
       			"outputs",
        		lv_outputs_7_0, 
        		"com.rockwellcollins.atc.Limp.OutputArgList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLocalProcedureAccess().getRightParenthesisKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalProcedureAccess().getVarBlockVarBlockParserRuleCall_9_0()); 
	    }
		lv_varBlock_9_0=ruleVarBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalProcedureRule());
	        }
       		set(
       			$current, 
       			"varBlock",
        		lv_varBlock_9_0, 
        		"com.rockwellcollins.atc.Limp.VarBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalProcedureAccess().getAttributeBlockAttributeBlockParserRuleCall_10_0()); 
	    }
		lv_attributeBlock_10_0=ruleAttributeBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalProcedureRule());
	        }
       		set(
       			$current, 
       			"attributeBlock",
        		lv_attributeBlock_10_0, 
        		"com.rockwellcollins.atc.Limp.AttributeBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='statements' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getLocalProcedureAccess().getStatementsKeyword_11());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalProcedureAccess().getStatementblockStatementBlockParserRuleCall_12_0()); 
	    }
		lv_statementblock_12_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalProcedureRule());
	        }
       		set(
       			$current, 
       			"statementblock",
        		lv_statementblock_12_0, 
        		"com.rockwellcollins.atc.Limp.StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current; } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeDeclarationAccess().getTypeAliasAction_0_0(),
            $current);
    }
)	otherlv_1='type' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getTypeDeclarationAccess().getNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getTypeTypeParserRuleCall_0_4_0()); 
	    }
		lv_type_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"com.rockwellcollins.atc.Limp.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getEnumTypeDefParserRuleCall_1()); 
    }
    this_EnumTypeDef_5=ruleEnumTypeDef
    { 
        $current = $this_EnumTypeDef_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getRecordTypeDefParserRuleCall_2()); 
    }
    this_RecordTypeDef_6=ruleRecordTypeDef
    { 
        $current = $this_RecordTypeDef_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getArrayTypeDefParserRuleCall_3()); 
    }
    this_ArrayTypeDef_7=ruleArrayTypeDef
    { 
        $current = $this_ArrayTypeDef_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getAbstractTypeDefParserRuleCall_4()); 
    }
    this_AbstractTypeDef_8=ruleAbstractTypeDef
    { 
        $current = $this_AbstractTypeDef_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVarBlock
entryRuleVarBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarBlockRule()); }
	 iv_ruleVarBlock=ruleVarBlock 
	 { $current=$iv_ruleVarBlock.current; } 
	 EOF 
;

// Rule VarBlock
ruleVarBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVarBlockAccess().getSomeVarBlockAction_0_0(),
            $current);
    }
)	otherlv_1='var' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarBlockAccess().getVarKeyword_0_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVarBlockAccess().getLeftCurlyBracketKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarBlockAccess().getLocalsLocalArgParserRuleCall_0_3_0()); 
	    }
		lv_locals_3_0=ruleLocalArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarBlockRule());
	        }
       		add(
       			$current, 
       			"locals",
        		lv_locals_3_0, 
        		"com.rockwellcollins.atc.Limp.LocalArg");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVarBlockAccess().getRightCurlyBracketKeyword_0_4());
    }
)
    |(
    {
        $current = forceCreateModelElement(
            grammarAccess.getVarBlockAccess().getNoVarBlockAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleEnumTypeDef
entryRuleEnumTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumTypeDefRule()); }
	 iv_ruleEnumTypeDef=ruleEnumTypeDef 
	 { $current=$iv_ruleEnumTypeDef.current; } 
	 EOF 
;

// Rule EnumTypeDef
ruleEnumTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumTypeDefAccess().getTypeKeyword_0());
    }
	otherlv_1='enum' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumTypeDefAccess().getEnumKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getEnumTypeDefAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEnumTypeDefAccess().getEqualsSignKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumTypeDefAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumTypeDefAccess().getEnumerationsEnumValueParserRuleCall_5_0()); 
	    }
		lv_enumerations_5_0=ruleEnumValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumTypeDefRule());
	        }
       		add(
       			$current, 
       			"enumerations",
        		lv_enumerations_5_0, 
        		"com.rockwellcollins.atc.Limp.EnumValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumTypeDefAccess().getCommaKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumTypeDefAccess().getEnumerationsEnumValueParserRuleCall_6_1_0()); 
	    }
		lv_enumerations_7_0=ruleEnumValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumTypeDefRule());
	        }
       		add(
       			$current, 
       			"enumerations",
        		lv_enumerations_7_0, 
        		"com.rockwellcollins.atc.Limp.EnumValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEnumTypeDefAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleEnumValue
entryRuleEnumValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumValueRule()); }
	 iv_ruleEnumValue=ruleEnumValue 
	 { $current=$iv_ruleEnumValue.current; } 
	 EOF 
;

// Rule EnumValue
ruleEnumValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEnumValueAccess().getEnumValueAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEnumValueAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
))
;





// Entry rule entryRuleRecordTypeDef
entryRuleRecordTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordTypeDefRule()); }
	 iv_ruleRecordTypeDef=ruleRecordTypeDef 
	 { $current=$iv_ruleRecordTypeDef.current; } 
	 EOF 
;

// Rule RecordTypeDef
ruleRecordTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordTypeDefAccess().getTypeKeyword_0());
    }
	otherlv_1='record' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordTypeDefAccess().getRecordKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getRecordTypeDefAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordTypeDefAccess().getEqualsSignKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecordTypeDefAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeDefAccess().getFieldsRecordFieldTypeParserRuleCall_5_0()); 
	    }
		lv_fields_5_0=ruleRecordFieldType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeDefRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_5_0, 
        		"com.rockwellcollins.atc.Limp.RecordFieldType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRecordTypeDefAccess().getCommaKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeDefAccess().getFieldsRecordFieldTypeParserRuleCall_6_1_0()); 
	    }
		lv_fields_7_0=ruleRecordFieldType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeDefRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_7_0, 
        		"com.rockwellcollins.atc.Limp.RecordFieldType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRecordTypeDefAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleArrayTypeDef
entryRuleArrayTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayTypeDefRule()); }
	 iv_ruleArrayTypeDef=ruleArrayTypeDef 
	 { $current=$iv_ruleArrayTypeDef.current; } 
	 EOF 
;

// Rule ArrayTypeDef
ruleArrayTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayTypeDefAccess().getTypeKeyword_0());
    }
	otherlv_1='array' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayTypeDefAccess().getArrayKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getArrayTypeDefAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayTypeDefAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeDefAccess().getBaseTypeTypeParserRuleCall_4_0()); 
	    }
		lv_baseType_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeDefRule());
	        }
       		set(
       			$current, 
       			"baseType",
        		lv_baseType_4_0, 
        		"com.rockwellcollins.atc.Limp.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayTypeDefAccess().getLeftSquareBracketKeyword_5());
    }
(
(
		lv_size_6_0=RULE_INT
		{
			newLeafNode(lv_size_6_0, grammarAccess.getArrayTypeDefAccess().getSizeINTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_6_0, 
        		"com.rockwellcollins.atc.Limp.INT");
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getArrayTypeDefAccess().getRightSquareBracketKeyword_7());
    }
)
;





// Entry rule entryRuleAbstractTypeDef
entryRuleAbstractTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractTypeDefRule()); }
	 iv_ruleAbstractTypeDef=ruleAbstractTypeDef 
	 { $current=$iv_ruleAbstractTypeDef.current; } 
	 EOF 
;

// Rule AbstractTypeDef
ruleAbstractTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAbstractTypeDefAccess().getTypeKeyword_0());
    }
	otherlv_1='abstract' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAbstractTypeDefAccess().getAbstractKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAbstractTypeDefAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
))
;





// Entry rule entryRuleRecordFieldType
entryRuleRecordFieldType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordFieldTypeRule()); }
	 iv_ruleRecordFieldType=ruleRecordFieldType 
	 { $current=$iv_ruleRecordFieldType.current; } 
	 EOF 
;

// Rule RecordFieldType
ruleRecordFieldType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_fieldName_0_0=RULE_ID
		{
			newLeafNode(lv_fieldName_0_0, grammarAccess.getRecordFieldTypeAccess().getFieldNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordFieldTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fieldName",
        		lv_fieldName_0_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordFieldTypeAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordFieldTypeAccess().getFieldTypeTypeParserRuleCall_2_0()); 
	    }
		lv_fieldType_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordFieldTypeRule());
	        }
       		set(
       			$current, 
       			"fieldType",
        		lv_fieldType_2_0, 
        		"com.rockwellcollins.atc.Limp.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDeclarationRule()); }
	 iv_ruleConstantDeclaration=ruleConstantDeclaration 
	 { $current=$iv_ruleConstantDeclaration.current; } 
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='constant' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantDeclarationAccess().getConstantKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"com.rockwellcollins.atc.Limp.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantDeclarationAccess().getEqualsSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getExprExprParserRuleCall_4_1_0()); 
	    }
		lv_expr_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleGlobalDeclaration
entryRuleGlobalDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalDeclarationRule()); }
	 iv_ruleGlobalDeclaration=ruleGlobalDeclaration 
	 { $current=$iv_ruleGlobalDeclaration.current; } 
	 EOF 
;

// Rule GlobalDeclaration
ruleGlobalDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='global' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGlobalDeclarationAccess().getGlobalKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getGlobalDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGlobalDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGlobalDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalDeclarationAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"com.rockwellcollins.atc.Limp.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleInputArgList
entryRuleInputArgList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputArgListRule()); }
	 iv_ruleInputArgList=ruleInputArgList 
	 { $current=$iv_ruleInputArgList.current; } 
	 EOF 
;

// Rule InputArgList
ruleInputArgList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInputArgListAccess().getInputArgListAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getInputArgListAccess().getInputArgsInputArgParserRuleCall_1_0_0()); 
	    }
		lv_inputArgs_1_0=ruleInputArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputArgListRule());
	        }
       		add(
       			$current, 
       			"inputArgs",
        		lv_inputArgs_1_0, 
        		"com.rockwellcollins.atc.Limp.InputArg");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInputArgListAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputArgListAccess().getInputArgsInputArgParserRuleCall_1_1_1_0()); 
	    }
		lv_inputArgs_3_0=ruleInputArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputArgListRule());
	        }
       		add(
       			$current, 
       			"inputArgs",
        		lv_inputArgs_3_0, 
        		"com.rockwellcollins.atc.Limp.InputArg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleInputArg
entryRuleInputArg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputArgRule()); }
	 iv_ruleInputArg=ruleInputArg 
	 { $current=$iv_ruleInputArg.current; } 
	 EOF 
;

// Rule InputArg
ruleInputArg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getInputArgAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputArgRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputArgAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputArgAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputArgRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.rockwellcollins.atc.Limp.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLocalArg
entryRuleLocalArg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalArgRule()); }
	 iv_ruleLocalArg=ruleLocalArg 
	 { $current=$iv_ruleLocalArg.current; } 
	 EOF 
;

// Rule LocalArg
ruleLocalArg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getLocalArgAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalArgRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalArgAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalArgAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalArgRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.rockwellcollins.atc.Limp.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocalArgAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleOutputArgList
entryRuleOutputArgList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputArgListRule()); }
	 iv_ruleOutputArgList=ruleOutputArgList 
	 { $current=$iv_ruleOutputArgList.current; } 
	 EOF 
;

// Rule OutputArgList
ruleOutputArgList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOutputArgListAccess().getOutputArgListAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getOutputArgListAccess().getOutputArgsOutputArgParserRuleCall_1_0_0()); 
	    }
		lv_outputArgs_1_0=ruleOutputArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputArgListRule());
	        }
       		add(
       			$current, 
       			"outputArgs",
        		lv_outputArgs_1_0, 
        		"com.rockwellcollins.atc.Limp.OutputArg");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOutputArgListAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputArgListAccess().getOutputArgsOutputArgParserRuleCall_1_1_1_0()); 
	    }
		lv_outputArgs_3_0=ruleOutputArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputArgListRule());
	        }
       		add(
       			$current, 
       			"outputArgs",
        		lv_outputArgs_3_0, 
        		"com.rockwellcollins.atc.Limp.OutputArg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleOutputArg
entryRuleOutputArg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputArgRule()); }
	 iv_ruleOutputArg=ruleOutputArg 
	 { $current=$iv_ruleOutputArg.current; } 
	 EOF 
;

// Rule OutputArg
ruleOutputArg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getOutputArgAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputArgRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutputArgAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputArgAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputArgRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.rockwellcollins.atc.Limp.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getVoidTypeAction_0_0(),
            $current);
    }
)	otherlv_1='void' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getVoidKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getBoolTypeAction_1_0(),
            $current);
    }
)	otherlv_3='bool' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getBoolKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getIntegerTypeAction_2_0(),
            $current);
    }
)	otherlv_5='int' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getIntKeyword_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getRealTypeAction_3_0(),
            $current);
    }
)	otherlv_7='real' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getRealKeyword_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getStringTypeAction_4_0(),
            $current);
    }
)	otherlv_9='string' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTypeAccess().getStringKeyword_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getEnumTypeAction_5_0(),
            $current);
    }
)	otherlv_11='enum' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTypeAccess().getEnumKeyword_5_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
        }
	otherlv_12=RULE_ID
	{
		newLeafNode(otherlv_12, grammarAccess.getTypeAccess().getEnumDefEnumTypeDefCrossReference_5_2_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getRecordTypeAction_6_0(),
            $current);
    }
)	otherlv_14='record' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTypeAccess().getRecordKeyword_6_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
        }
	otherlv_15=RULE_ID
	{
		newLeafNode(otherlv_15, grammarAccess.getTypeAccess().getRecordDefRecordTypeDefCrossReference_6_2_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getArrayTypeAction_7_0(),
            $current);
    }
)	otherlv_17='array' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getTypeAccess().getArrayKeyword_7_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
        }
	otherlv_18=RULE_ID
	{
		newLeafNode(otherlv_18, grammarAccess.getTypeAccess().getArrayDefArrayTypeDefCrossReference_7_2_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getAbstractTypeAction_8_0(),
            $current);
    }
)	otherlv_20='abstract' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTypeAccess().getAbstractKeyword_8_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
        }
	otherlv_21=RULE_ID
	{
		newLeafNode(otherlv_21, grammarAccess.getTypeAccess().getAbstractDefAbstractTypeDefCrossReference_8_2_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getNamedTypeAction_9_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
        }
	otherlv_23=RULE_ID
	{
		newLeafNode(otherlv_23, grammarAccess.getTypeAccess().getAliasTypeAliasCrossReference_9_1_0()); 
	}

)
)))
;





// Entry rule entryRuleAttributeBlock
entryRuleAttributeBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeBlockRule()); }
	 iv_ruleAttributeBlock=ruleAttributeBlock 
	 { $current=$iv_ruleAttributeBlock.current; } 
	 EOF 
;

// Rule AttributeBlock
ruleAttributeBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributeBlockAccess().getSomeAttributeBlockAction_0_0(),
            $current);
    }
)	otherlv_1='attributes' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeBlockAccess().getAttributesKeyword_0_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeBlockAccess().getLeftCurlyBracketKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeBlockAccess().getAttributeListAttributeParserRuleCall_0_3_0()); 
	    }
		lv_attributeList_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeBlockRule());
	        }
       		add(
       			$current, 
       			"attributeList",
        		lv_attributeList_3_0, 
        		"com.rockwellcollins.atc.Limp.Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeBlockAccess().getRightCurlyBracketKeyword_0_4());
    }
)
    |(
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributeBlockAccess().getNoAttributeBlockAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getPreconditionParserRuleCall_0()); 
    }
    this_Precondition_0=rulePrecondition
    { 
        $current = $this_Precondition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getPostconditionParserRuleCall_1()); 
    }
    this_Postcondition_1=rulePostcondition
    { 
        $current = $this_Postcondition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getDefineParserRuleCall_2()); 
    }
    this_Define_2=ruleDefine
    { 
        $current = $this_Define_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getUsesParserRuleCall_3()); 
    }
    this_Uses_3=ruleUses
    { 
        $current = $this_Uses_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrecondition
entryRulePrecondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreconditionRule()); }
	 iv_rulePrecondition=rulePrecondition 
	 { $current=$iv_rulePrecondition.current; } 
	 EOF 
;

// Rule Precondition
rulePrecondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='precondition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPreconditionAccess().getPreconditionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPreconditionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPreconditionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPreconditionAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreconditionAccess().getExprExprParserRuleCall_3_0()); 
	    }
		lv_expr_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreconditionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPreconditionAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRulePostcondition
entryRulePostcondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostconditionRule()); }
	 iv_rulePostcondition=rulePostcondition 
	 { $current=$iv_rulePostcondition.current; } 
	 EOF 
;

// Rule Postcondition
rulePostcondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='postcondition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPostconditionAccess().getPostconditionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPostconditionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPostconditionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPostconditionAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostconditionAccess().getExprExprParserRuleCall_3_0()); 
	    }
		lv_expr_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostconditionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPostconditionAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleDefineUseRef
entryRuleDefineUseRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefineUseRefRule()); }
	 iv_ruleDefineUseRef=ruleDefineUseRef 
	 { $current=$iv_ruleDefineUseRef.current; } 
	 EOF 
;

// Rule DefineUseRef
ruleDefineUseRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineUseRefAccess().getReferenceExprExprParserRuleCall_0()); 
	    }
		lv_referenceExpr_0_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineUseRefRule());
	        }
       		set(
       			$current, 
       			"referenceExpr",
        		lv_referenceExpr_0_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDefine
entryRuleDefine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefineRule()); }
	 iv_ruleDefine=ruleDefine 
	 { $current=$iv_ruleDefine.current; } 
	 EOF 
;

// Rule Define
ruleDefine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='defines' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefineAccess().getDefinesKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineAccess().getElementsDefineUseRefParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleDefineUseRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"com.rockwellcollins.atc.Limp.DefineUseRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefineAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineAccess().getElementsDefineUseRefParserRuleCall_2_1_0()); 
	    }
		lv_elements_3_0=ruleDefineUseRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"com.rockwellcollins.atc.Limp.DefineUseRef");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefineAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleUses
entryRuleUses returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUsesRule()); }
	 iv_ruleUses=ruleUses 
	 { $current=$iv_ruleUses.current; } 
	 EOF 
;

// Rule Uses
ruleUses returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='uses' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUsesAccess().getUsesKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUsesAccess().getElementsDefineUseRefParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleDefineUseRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUsesRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"com.rockwellcollins.atc.Limp.DefineUseRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUsesAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUsesAccess().getElementsDefineUseRefParserRuleCall_2_1_0()); 
	    }
		lv_elements_3_0=ruleDefineUseRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUsesRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"com.rockwellcollins.atc.Limp.DefineUseRef");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUsesAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleStatementBlock
entryRuleStatementBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementBlockRule()); }
	 iv_ruleStatementBlock=ruleStatementBlock 
	 { $current=$iv_ruleStatementBlock.current; } 
	 EOF 
;

// Rule StatementBlock
ruleStatementBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementBlockAccess().getStatementBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatementBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementBlockAccess().getStatementsStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"com.rockwellcollins.atc.Limp.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getVoidStatementParserRuleCall_0()); 
    }
    this_VoidStatement_0=ruleVoidStatement
    { 
        $current = $this_VoidStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_1()); 
    }
    this_AssignmentStatement_1=ruleAssignmentStatement
    { 
        $current = $this_AssignmentStatement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfThenElseStatementParserRuleCall_2()); 
    }
    this_IfThenElseStatement_2=ruleIfThenElseStatement
    { 
        $current = $this_IfThenElseStatement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_3()); 
    }
    this_WhileStatement_3=ruleWhileStatement
    { 
        $current = $this_WhileStatement_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_4()); 
    }
    this_ForStatement_4=ruleForStatement
    { 
        $current = $this_ForStatement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getGotoStatementParserRuleCall_5()); 
    }
    this_GotoStatement_5=ruleGotoStatement
    { 
        $current = $this_GotoStatement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLabelStatementParserRuleCall_6()); 
    }
    this_LabelStatement_6=ruleLabelStatement
    { 
        $current = $this_LabelStatement_6.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getBreakStatementAction_7_0(),
            $current);
    }
)	otherlv_8='break' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStatementAccess().getBreakKeyword_7_1());
    }
	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStatementAccess().getSemicolonKeyword_7_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getContinueStatementAction_8_0(),
            $current);
    }
)	otherlv_11='continue' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getStatementAccess().getContinueKeyword_8_1());
    }
	otherlv_12=';' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStatementAccess().getSemicolonKeyword_8_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getReturnStatementAction_9_0(),
            $current);
    }
)	otherlv_14='return' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getStatementAccess().getReturnKeyword_9_1());
    }
	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getStatementAccess().getSemicolonKeyword_9_2());
    }
))
;





// Entry rule entryRuleVoidStatement
entryRuleVoidStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVoidStatementRule()); }
	 iv_ruleVoidStatement=ruleVoidStatement 
	 { $current=$iv_ruleVoidStatement.current; } 
	 EOF 
;

// Rule VoidStatement
ruleVoidStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVoidStatementAccess().getExprExprParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVoidStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVoidStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleAssignmentStatement
entryRuleAssignmentStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentStatementRule()); }
	 iv_ruleAssignmentStatement=ruleAssignmentStatement 
	 { $current=$iv_ruleAssignmentStatement.current; } 
	 EOF 
;

// Rule AssignmentStatement
ruleAssignmentStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentStatementAccess().getIdsIdListParserRuleCall_0_0()); 
	    }
		lv_ids_0_0=ruleIdList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"ids",
        		lv_ids_0_0, 
        		"com.rockwellcollins.atc.Limp.IdList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentStatementAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentStatementAccess().getRhsExprParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssignmentStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleIfThenElseStatement
entryRuleIfThenElseStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfThenElseStatementRule()); }
	 iv_ruleIfThenElseStatement=ruleIfThenElseStatement 
	 { $current=$iv_ruleIfThenElseStatement.current; } 
	 EOF 
;

// Rule IfThenElseStatement
ruleIfThenElseStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfThenElseStatementAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseStatementAccess().getCondExprParserRuleCall_1_0()); 
	    }
		lv_cond_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseStatementRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_1_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfThenElseStatementAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseStatementAccess().getThenBlockStatementBlockParserRuleCall_3_0()); 
	    }
		lv_thenBlock_3_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseStatementRule());
	        }
       		set(
       			$current, 
       			"thenBlock",
        		lv_thenBlock_3_0, 
        		"com.rockwellcollins.atc.Limp.StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseStatementAccess().getElseElseParserRuleCall_4_0()); 
	    }
		lv_else_4_0=ruleElse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseStatementRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_4_0, 
        		"com.rockwellcollins.atc.Limp.Else");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleElse
entryRuleElse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElseRule()); }
	 iv_ruleElse=ruleElse 
	 { $current=$iv_ruleElse.current; } 
	 EOF 
;

// Rule Else
ruleElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getElseAccess().getElseBlockAction_0_0(),
            $current);
    }
)	otherlv_1='else' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElseAccess().getElseKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseAccess().getBlockStatementBlockParserRuleCall_0_2_0()); 
	    }
		lv_block_2_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_2_0, 
        		"com.rockwellcollins.atc.Limp.StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getElseAccess().getElseIfAction_1_0(),
            $current);
    }
)	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getElseAccess().getElseKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseAccess().getIfThenElseIfThenElseStatementParserRuleCall_1_2_0()); 
	    }
		lv_ifThenElse_5_0=ruleIfThenElseStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseRule());
	        }
       		set(
       			$current, 
       			"ifThenElse",
        		lv_ifThenElse_5_0, 
        		"com.rockwellcollins.atc.Limp.IfThenElseStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
    {
        $current = forceCreateModelElement(
            grammarAccess.getElseAccess().getNoElseAction_2(),
            $current);
    }
))
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getCondExprParserRuleCall_1_0()); 
	    }
		lv_cond_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_1_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getBlockStatementBlockParserRuleCall_2_0()); 
	    }
		lv_block_2_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_2_0, 
        		"com.rockwellcollins.atc.Limp.StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current; } 
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getInitStatementAssignmentStatementParserRuleCall_2_0()); 
	    }
		lv_initStatement_2_0=ruleAssignmentStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"initStatement",
        		lv_initStatement_2_0, 
        		"com.rockwellcollins.atc.Limp.AssignmentStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getLimitExprExprParserRuleCall_3_0()); 
	    }
		lv_limitExpr_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"limitExpr",
        		lv_limitExpr_3_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForStatementAccess().getSemicolonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getIncrementStatementAssignmentStatementParserRuleCall_5_0()); 
	    }
		lv_incrementStatement_5_0=ruleAssignmentStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"incrementStatement",
        		lv_incrementStatement_5_0, 
        		"com.rockwellcollins.atc.Limp.AssignmentStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getBlockStatementBlockParserRuleCall_7_0()); 
	    }
		lv_block_7_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_7_0, 
        		"com.rockwellcollins.atc.Limp.StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLabelStatement
entryRuleLabelStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelStatementRule()); }
	 iv_ruleLabelStatement=ruleLabelStatement 
	 { $current=$iv_ruleLabelStatement.current; } 
	 EOF 
;

// Rule LabelStatement
ruleLabelStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='label' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLabelStatementAccess().getLabelKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLabelStatementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabelStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLabelStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleGotoStatement
entryRuleGotoStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGotoStatementRule()); }
	 iv_ruleGotoStatement=ruleGotoStatement 
	 { $current=$iv_ruleGotoStatement.current; } 
	 EOF 
;

// Rule GotoStatement
ruleGotoStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGotoStatementAccess().getGotoStatementAction_0(),
            $current);
    }
)	otherlv_1='goto' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGotoStatementAccess().getGotoKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGotoStatementRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getGotoStatementAccess().getLabelLabelStatementCrossReference_2_0()); 
	}

)
)(	otherlv_3='when' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGotoStatementAccess().getWhenKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGotoStatementAccess().getWhenExprExprParserRuleCall_3_1_0()); 
	    }
		lv_whenExpr_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGotoStatementRule());
	        }
       		set(
       			$current, 
       			"whenExpr",
        		lv_whenExpr_4_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGotoStatementAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleEquationBlock
entryRuleEquationBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEquationBlockRule()); }
	 iv_ruleEquationBlock=ruleEquationBlock 
	 { $current=$iv_ruleEquationBlock.current; } 
	 EOF 
;

// Rule EquationBlock
ruleEquationBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEquationBlockAccess().getEquationBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEquationBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEquationBlockAccess().getEquationsEquationParserRuleCall_2_0()); 
	    }
		lv_equations_2_0=ruleEquation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquationBlockRule());
	        }
       		add(
       			$current, 
       			"equations",
        		lv_equations_2_0, 
        		"com.rockwellcollins.atc.Limp.Equation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEquationBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleEquation
entryRuleEquation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEquationRule()); }
	 iv_ruleEquation=ruleEquation 
	 { $current=$iv_ruleEquation.current; } 
	 EOF 
;

// Rule Equation
ruleEquation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEquationAccess().getVoidStatementParserRuleCall_0()); 
    }
    this_VoidStatement_0=ruleVoidStatement
    { 
        $current = $this_VoidStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEquationAccess().getAssignmentStatementParserRuleCall_1()); 
    }
    this_AssignmentStatement_1=ruleAssignmentStatement
    { 
        $current = $this_AssignmentStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIdList
entryRuleIdList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdListRule()); }
	 iv_ruleIdList=ruleIdList 
	 { $current=$iv_ruleIdList.current; } 
	 EOF 
;

// Rule IdList
ruleIdList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdListRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getIdListAccess().getIdsVariableRefCrossReference_0_0()); 
	}

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIdListAccess().getCommaKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdListRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getIdListAccess().getIdsVariableRefCrossReference_1_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExprAccess().getIfThenElseExprParserRuleCall()); 
    }
    this_IfThenElseExpr_0=ruleIfThenElseExpr
    { 
        $current = $this_IfThenElseExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleIfThenElseExpr
entryRuleIfThenElseExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfThenElseExprRule()); }
	 iv_ruleIfThenElseExpr=ruleIfThenElseExpr 
	 { $current=$iv_ruleIfThenElseExpr.current; } 
	 EOF 
;

// Rule IfThenElseExpr
ruleIfThenElseExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIfThenElseExprAccess().getChoiceExprParserRuleCall_0()); 
    }
    this_ChoiceExpr_0=ruleChoiceExpr
    { 
        $current = $this_ChoiceExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'?' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getIfThenElseExprAccess().getIfThenElseExprCondExprAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfThenElseExprAccess().getQuestionMarkKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseExprAccess().getThenExprExprParserRuleCall_1_1_0()); 
	    }
		lv_thenExpr_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseExprRule());
	        }
       		set(
       			$current, 
       			"thenExpr",
        		lv_thenExpr_3_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfThenElseExprAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseExprAccess().getElseExprExprParserRuleCall_1_3_0()); 
	    }
		lv_elseExpr_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseExprRule());
	        }
       		set(
       			$current, 
       			"elseExpr",
        		lv_elseExpr_5_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleChoiceExpr
entryRuleChoiceExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoiceExprRule()); }
	 iv_ruleChoiceExpr=ruleChoiceExpr 
	 { $current=$iv_ruleChoiceExpr.current; } 
	 EOF 
;

// Rule ChoiceExpr
ruleChoiceExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getChoiceExprAccess().getChoiceExprAction_0_0(),
            $current);
    }
)	otherlv_1='choice' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChoiceExprAccess().getChoiceKeyword_0_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getChoiceExprAccess().getLeftParenthesisKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceExprAccess().getFirstExprParserRuleCall_0_3_0()); 
	    }
		lv_first_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceExprRule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_3_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getChoiceExprAccess().getCommaKeyword_0_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceExprAccess().getSecondExprParserRuleCall_0_5_0()); 
	    }
		lv_second_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceExprRule());
	        }
       		set(
       			$current, 
       			"second",
        		lv_second_5_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getChoiceExprAccess().getRightParenthesisKeyword_0_6());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getChoiceExprAccess().getImpliesExprParserRuleCall_1()); 
    }
    this_ImpliesExpr_7=ruleImpliesExpr
    { 
        $current = $this_ImpliesExpr_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleImpliesExpr
entryRuleImpliesExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImpliesExprRule()); }
	 iv_ruleImpliesExpr=ruleImpliesExpr 
	 { $current=$iv_ruleImpliesExpr.current; } 
	 EOF 
;

// Rule ImpliesExpr
ruleImpliesExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImpliesExprAccess().getOrExprParserRuleCall_0()); 
    }
    this_OrExpr_0=ruleOrExpr
    { 
        $current = $this_OrExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'=>' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'=>' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getImpliesExprAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImpliesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "=>");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExprAccess().getRightImpliesExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleImpliesExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.atc.Limp.ImpliesExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); 
    }
    this_AndExpr_0=ruleAndExpr
    { 
        $current = $this_AndExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'or' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'or' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getOrExprAccess().getOpOrKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "or");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getRightAndExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.atc.Limp.AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExprAccess().getRelationalExprParserRuleCall_0()); 
    }
    this_RelationalExpr_0=ruleRelationalExpr
    { 
        $current = $this_RelationalExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'and' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'and' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndExprAccess().getOpAndKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "and");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getRightRelationalExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleRelationalExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.atc.Limp.RelationalExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalOp
entryRuleRelationalOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); } 
	 iv_ruleRelationalOp=ruleRelationalOp 
	 { $current=$iv_ruleRelationalOp.current.getText(); }  
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getEqualsSignEqualsSignKeyword_4()); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignGreaterThanSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleRelationalExpr
entryRuleRelationalExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExprRule()); }
	 iv_ruleRelationalExpr=ruleRelationalExpr 
	 { $current=$iv_ruleRelationalExpr.current; } 
	 EOF 
;

// Rule RelationalExpr
ruleRelationalExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExprAccess().getPlusExprParserRuleCall_0()); 
    }
    this_PlusExpr_0=rulePlusExpr
    { 
        $current = $this_PlusExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleRelationalOp
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExprAccess().getOpRelationalOpParserRuleCall_1_0_0_1_0()); 
	    }
		lv_op_2_0=ruleRelationalOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"com.rockwellcollins.atc.Limp.RelationalOp");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExprAccess().getRightPlusExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=rulePlusExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.atc.Limp.PlusExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePlusExpr
entryRulePlusExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusExprRule()); }
	 iv_rulePlusExpr=rulePlusExpr 
	 { $current=$iv_rulePlusExpr.current; } 
	 EOF 
;

// Rule PlusExpr
rulePlusExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPlusExprAccess().getMultExprParserRuleCall_0()); 
    }
    this_MultExpr_0=ruleMultExpr
    { 
        $current = $this_MultExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'+' 
 

    |			'-' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getPlusExprAccess().getOpPlusSignKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getPlusExprAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusExprAccess().getRightMultExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleMultExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.atc.Limp.MultExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultExpr
entryRuleMultExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultExprRule()); }
	 iv_ruleMultExpr=ruleMultExpr 
	 { $current=$iv_ruleMultExpr.current; } 
	 EOF 
;

// Rule MultExpr
ruleMultExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultExprAccess().getUnaryExprParserRuleCall_0()); 
    }
    this_UnaryExpr_0=ruleUnaryExpr
    { 
        $current = $this_UnaryExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'*' 
 

    |			'/' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMultExprAccess().getOpAsteriskKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMultExprAccess().getOpSolidusKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultExprAccess().getRightUnaryExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleUnaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.atc.Limp.UnaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	 iv_ruleUnaryExpr=ruleUnaryExpr 
	 { $current=$iv_ruleUnaryExpr.current; } 
	 EOF 
;

// Rule UnaryExpr
ruleUnaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnaryExprAccess().getAccessExprParserRuleCall_0()); 
    }
    this_AccessExpr_0=ruleAccessExpr
    { 
        $current = $this_AccessExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryExprAccess().getUnaryNegationExprAction_1_0(),
            $current);
    }
)	otherlv_2='not' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryExprAccess().getNotKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprAccess().getExprUnaryExprParserRuleCall_1_2_0()); 
	    }
		lv_expr_3_0=ruleUnaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"com.rockwellcollins.atc.Limp.UnaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryExprAccess().getUnaryMinusExprAction_2_0(),
            $current);
    }
)	otherlv_5='-' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnaryExprAccess().getHyphenMinusKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprAccess().getExprUnaryExprParserRuleCall_2_2_0()); 
	    }
		lv_expr_6_0=ruleUnaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_6_0, 
        		"com.rockwellcollins.atc.Limp.UnaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleAccessExpr
entryRuleAccessExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessExprRule()); }
	 iv_ruleAccessExpr=ruleAccessExpr 
	 { $current=$iv_ruleAccessExpr.current; } 
	 EOF 
;

// Rule AccessExpr
ruleAccessExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAccessExprAccess().getTerminalExprParserRuleCall_0()); 
    }
    this_TerminalExpr_0=ruleTerminalExpr
    { 
        $current = $this_TerminalExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)	'.' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExprAccess().getRecordAccessExprRecordAction_1_0_0_0_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAccessExprAccess().getFullStopKeyword_1_0_0_0_1());
    }
))(
(
		lv_field_3_0=RULE_ID
		{
			newLeafNode(lv_field_3_0, grammarAccess.getAccessExprAccess().getFieldIDTerminalRuleCall_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"field",
        		lv_field_3_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
))
    |(((((
)	'{' 
(
(
RULE_ID

)
)	':=' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExprAccess().getRecordUpdateExprRecordAction_1_1_0_0_0(),
            $current);
    }
)	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAccessExprAccess().getLeftCurlyBracketKeyword_1_1_0_0_1());
    }
(
(
		lv_field_6_0=RULE_ID
		{
			newLeafNode(lv_field_6_0, grammarAccess.getAccessExprAccess().getFieldIDTerminalRuleCall_1_1_0_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"field",
        		lv_field_6_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_7=':=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAccessExprAccess().getColonEqualsSignKeyword_1_1_0_0_3());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessExprAccess().getValueExprParserRuleCall_1_1_1_0()); 
	    }
		lv_value_8_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_8_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAccessExprAccess().getRightCurlyBracketKeyword_1_1_2());
    }
)
    |(((((
)	'[' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExprAccess().getArrayAccessExprArrayAction_1_2_0_0_0(),
            $current);
    }
)	otherlv_11='[' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAccessExprAccess().getLeftSquareBracketKeyword_1_2_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessExprAccess().getIndexExprParserRuleCall_1_2_1_0()); 
	    }
		lv_index_12_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessExprRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_12_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(((((
)	':=' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExprAccess().getArrayUpdateExprAccessAction_1_2_2_0_0_0(),
            $current);
    }
)	otherlv_14=':=' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getAccessExprAccess().getColonEqualsSignKeyword_1_2_2_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessExprAccess().getValueExprParserRuleCall_1_2_2_1_0()); 
	    }
		lv_value_15_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_15_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_16=']' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getAccessExprAccess().getRightSquareBracketKeyword_1_2_3());
    }
))*)
;







// Entry rule entryRuleTerminalExpr
entryRuleTerminalExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExprRule()); }
	 iv_ruleTerminalExpr=ruleTerminalExpr 
	 { $current=$iv_ruleTerminalExpr.current; } 
	 EOF 
;

// Rule TerminalExpr
ruleTerminalExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTerminalExprAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getTerminalExprAccess().getExprParserRuleCall_0_1()); 
    }
    this_Expr_1=ruleExpr
    { 
        $current = $this_Expr_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerminalExprAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getBooleanLiteralExprAction_1_0(),
            $current);
    }
)(
(
		lv_boolVal_4_0=RULE_BOOLEAN
		{
			newLeafNode(lv_boolVal_4_0, grammarAccess.getTerminalExprAccess().getBoolValBOOLEANTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"boolVal",
        		lv_boolVal_4_0, 
        		"com.rockwellcollins.atc.Limp.BOOLEAN");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getIntegerLiteralExprAction_2_0(),
            $current);
    }
)(
(
		lv_intVal_6_0=RULE_INT
		{
			newLeafNode(lv_intVal_6_0, grammarAccess.getTerminalExprAccess().getIntValINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intVal",
        		lv_intVal_6_0, 
        		"com.rockwellcollins.atc.Limp.INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getIntegerWildCardExprAction_3_0(),
            $current);
    }
)	otherlv_8='*' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTerminalExprAccess().getAsteriskKeyword_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getRealLiteralExprAction_4_0(),
            $current);
    }
)(
(
		lv_realVal_10_0=RULE_REAL
		{
			newLeafNode(lv_realVal_10_0, grammarAccess.getTerminalExprAccess().getRealValREALTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"realVal",
        		lv_realVal_10_0, 
        		"com.rockwellcollins.atc.Limp.REAL");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getStringLiteralExprAction_5_0(),
            $current);
    }
)(
(
		lv_stringVal_12_0=RULE_STRING
		{
			newLeafNode(lv_stringVal_12_0, grammarAccess.getTerminalExprAccess().getStringValSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringVal",
        		lv_stringVal_12_0, 
        		"com.rockwellcollins.atc.Limp.STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getInitExprAction_6_0(),
            $current);
    }
)	otherlv_14='init' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTerminalExprAccess().getInitKeyword_6_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExprRule());
	        }
        }
	otherlv_15=RULE_ID
	{
		newLeafNode(otherlv_15, grammarAccess.getTerminalExprAccess().getIdVariableRefCrossReference_6_2_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getSecondInitAction_7_0(),
            $current);
    }
)	otherlv_17='second_init' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getTerminalExprAccess().getSecond_initKeyword_7_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExprRule());
	        }
        }
	otherlv_18=RULE_ID
	{
		newLeafNode(otherlv_18, grammarAccess.getTerminalExprAccess().getIdVariableRefCrossReference_7_2_0()); 
	}

)
))
    |
    { 
        newCompositeNode(grammarAccess.getTerminalExprAccess().getArrayExprParserRuleCall_8()); 
    }
    this_ArrayExpr_19=ruleArrayExpr
    { 
        $current = $this_ArrayExpr_19.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalExprAccess().getRecordExprParserRuleCall_9()); 
    }
    this_RecordExpr_20=ruleRecordExpr
    { 
        $current = $this_RecordExpr_20.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getIdExprAction_10_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExprRule());
	        }
        }
	otherlv_22=RULE_ID
	{
		newLeafNode(otherlv_22, grammarAccess.getTerminalExprAccess().getIdVariableRefCrossReference_10_1_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExprAccess().getFcnCallExprAction_11_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExprRule());
	        }
        }
	otherlv_24=RULE_ID
	{
		newLeafNode(otherlv_24, grammarAccess.getTerminalExprAccess().getIdFunctionRefCrossReference_11_1_0()); 
	}

)
)	otherlv_25='(' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getTerminalExprAccess().getLeftParenthesisKeyword_11_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExprAccess().getExprsExprListParserRuleCall_11_3_0()); 
	    }
		lv_exprs_26_0=ruleExprList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExprRule());
	        }
       		set(
       			$current, 
       			"exprs",
        		lv_exprs_26_0, 
        		"com.rockwellcollins.atc.Limp.ExprList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_27=')' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getTerminalExprAccess().getRightParenthesisKeyword_11_4());
    }
))
;





// Entry rule entryRuleArrayExpr
entryRuleArrayExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayExprRule()); }
	 iv_ruleArrayExpr=ruleArrayExpr 
	 { $current=$iv_ruleArrayExpr.current; } 
	 EOF 
;

// Rule ArrayExpr
ruleArrayExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='array' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayExprAccess().getArrayKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayExprRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getArrayExprAccess().getArrayDefinitionArrayTypeDefCrossReference_1_0()); 
	}

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayExprAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayExprAccess().getExprListExprParserRuleCall_3_0()); 
	    }
		lv_exprList_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayExprRule());
	        }
       		add(
       			$current, 
       			"exprList",
        		lv_exprList_3_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayExprAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayExprAccess().getExprListExprParserRuleCall_4_1_0()); 
	    }
		lv_exprList_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayExprRule());
	        }
       		add(
       			$current, 
       			"exprList",
        		lv_exprList_5_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArrayExprAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Entry rule entryRuleRecordExpr
entryRuleRecordExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordExprRule()); }
	 iv_ruleRecordExpr=ruleRecordExpr 
	 { $current=$iv_ruleRecordExpr.current; } 
	 EOF 
;

// Rule RecordExpr
ruleRecordExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='record' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordExprAccess().getRecordKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordExprRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRecordExprAccess().getRecordDefinitionRecordTypeDefCrossReference_1_0()); 
	}

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordExprAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordExprAccess().getFieldExprListRecordFieldExprParserRuleCall_3_0()); 
	    }
		lv_fieldExprList_3_0=ruleRecordFieldExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordExprRule());
	        }
       		add(
       			$current, 
       			"fieldExprList",
        		lv_fieldExprList_3_0, 
        		"com.rockwellcollins.atc.Limp.RecordFieldExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecordExprAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordExprAccess().getFieldExprListRecordFieldExprParserRuleCall_4_1_0()); 
	    }
		lv_fieldExprList_5_0=ruleRecordFieldExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordExprRule());
	        }
       		add(
       			$current, 
       			"fieldExprList",
        		lv_fieldExprList_5_0, 
        		"com.rockwellcollins.atc.Limp.RecordFieldExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRecordExprAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleRecordFieldExpr
entryRuleRecordFieldExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordFieldExprRule()); }
	 iv_ruleRecordFieldExpr=ruleRecordFieldExpr 
	 { $current=$iv_ruleRecordFieldExpr.current; } 
	 EOF 
;

// Rule RecordFieldExpr
ruleRecordFieldExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_fieldName_0_0=RULE_ID
		{
			newLeafNode(lv_fieldName_0_0, grammarAccess.getRecordFieldExprAccess().getFieldNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordFieldExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fieldName",
        		lv_fieldName_0_0, 
        		"com.rockwellcollins.atc.Limp.ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordFieldExprAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordFieldExprAccess().getFieldExprExprParserRuleCall_2_0()); 
	    }
		lv_fieldExpr_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordFieldExprRule());
	        }
       		set(
       			$current, 
       			"fieldExpr",
        		lv_fieldExpr_2_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExprList
entryRuleExprList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprListRule()); }
	 iv_ruleExprList=ruleExprList 
	 { $current=$iv_ruleExprList.current; } 
	 EOF 
;

// Rule ExprList
ruleExprList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExprListAccess().getExprListAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExprListAccess().getExprListExprParserRuleCall_1_0_0()); 
	    }
		lv_exprList_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprListRule());
	        }
       		add(
       			$current, 
       			"exprList",
        		lv_exprList_1_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExprListAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprListAccess().getExprListExprParserRuleCall_1_1_1_0()); 
	    }
		lv_exprList_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprListRule());
	        }
       		add(
       			$current, 
       			"exprList",
        		lv_exprList_3_0, 
        		"com.rockwellcollins.atc.Limp.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;









RULE_SEMANTIC_COMMENT : '/#' ( options {greedy=false;} : . )*'#/';

RULE_INT : ('0'..'9')+;

RULE_BOOLEAN : ('true'|'false');

RULE_REAL : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


