/*
 * generated by Xtext
 */
package com.rockwellcollins.atc.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class LimpGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Specification");
		private final Assignment cDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0 = (RuleCall)cDeclarationsAssignment.eContents().get(0);
		
		//Specification:
		//	declarations+=Declaration*;
		@Override public ParserRule getRule() { return rule; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment() { return cDeclarationsAssignment; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0() { return cDeclarationsDeclarationParserRuleCall_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExternalFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExternalProcedureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLocalFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLocalProcedureParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConstantDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cGlobalDeclarationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTypeDeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Declaration:
		//	Import
		//	| Comment
		//	| ExternalFunction
		//	| ExternalProcedure
		//	| LocalFunction
		//	| LocalProcedure
		//	| ConstantDeclaration
		//	| GlobalDeclaration
		//	| TypeDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//Import | Comment | ExternalFunction | ExternalProcedure | LocalFunction | LocalProcedure | ConstantDeclaration |
		//GlobalDeclaration | TypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }

		//Comment
		public RuleCall getCommentParserRuleCall_1() { return cCommentParserRuleCall_1; }

		//ExternalFunction
		public RuleCall getExternalFunctionParserRuleCall_2() { return cExternalFunctionParserRuleCall_2; }

		//ExternalProcedure
		public RuleCall getExternalProcedureParserRuleCall_3() { return cExternalProcedureParserRuleCall_3; }

		//LocalFunction
		public RuleCall getLocalFunctionParserRuleCall_4() { return cLocalFunctionParserRuleCall_4; }

		//LocalProcedure
		public RuleCall getLocalProcedureParserRuleCall_5() { return cLocalProcedureParserRuleCall_5; }

		//ConstantDeclaration
		public RuleCall getConstantDeclarationParserRuleCall_6() { return cConstantDeclarationParserRuleCall_6; }

		//GlobalDeclaration
		public RuleCall getGlobalDeclarationParserRuleCall_7() { return cGlobalDeclarationParserRuleCall_7; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_8() { return cTypeDeclarationParserRuleCall_8; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Comment");
		private final Assignment cCommentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommentSEMANTIC_COMMENTTerminalRuleCall_0 = (RuleCall)cCommentAssignment.eContents().get(0);
		
		//Comment:
		//	comment=SEMANTIC_COMMENT;
		@Override public ParserRule getRule() { return rule; }

		//comment=SEMANTIC_COMMENT
		public Assignment getCommentAssignment() { return cCommentAssignment; }

		//SEMANTIC_COMMENT
		public RuleCall getCommentSEMANTIC_COMMENTTerminalRuleCall_0() { return cCommentSEMANTIC_COMMENTTerminalRuleCall_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class ExternalFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ExternalFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInputsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputsInputArgListParserRuleCall_4_0 = (RuleCall)cInputsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cReturnsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutputAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutputOutputArgParserRuleCall_8_0 = (RuleCall)cOutputAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ExternalFunction:
		//	'external' 'function' name=ID '(' inputs=InputArgList ')' 'returns' '(' output=OutputArg ')';
		@Override public ParserRule getRule() { return rule; }

		//'external' 'function' name=ID '(' inputs=InputArgList ')' 'returns' '(' output=OutputArg ')'
		public Group getGroup() { return cGroup; }

		//'external'
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }

		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//inputs=InputArgList
		public Assignment getInputsAssignment_4() { return cInputsAssignment_4; }

		//InputArgList
		public RuleCall getInputsInputArgListParserRuleCall_4_0() { return cInputsInputArgListParserRuleCall_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//'returns'
		public Keyword getReturnsKeyword_6() { return cReturnsKeyword_6; }

		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//output=OutputArg
		public Assignment getOutputAssignment_8() { return cOutputAssignment_8; }

		//OutputArg
		public RuleCall getOutputOutputArgParserRuleCall_8_0() { return cOutputOutputArgParserRuleCall_8_0; }

		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}

	public class ExternalProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ExternalProcedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProcedureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInputsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputsInputArgListParserRuleCall_4_0 = (RuleCall)cInputsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cReturnsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutputsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutputsOutputArgListParserRuleCall_8_0 = (RuleCall)cOutputsAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cAttributeBlockAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAttributeBlockAttributeBlockParserRuleCall_10_0 = (RuleCall)cAttributeBlockAssignment_10.eContents().get(0);
		
		//ExternalProcedure:
		//	'external' 'procedure' name=ID '(' inputs=InputArgList ')' 'returns' '(' outputs=OutputArgList ')'
		//	attributeBlock=AttributeBlock;
		@Override public ParserRule getRule() { return rule; }

		//'external' 'procedure' name=ID '(' inputs=InputArgList ')' 'returns' '(' outputs=OutputArgList ')'
		//attributeBlock=AttributeBlock
		public Group getGroup() { return cGroup; }

		//'external'
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }

		//'procedure'
		public Keyword getProcedureKeyword_1() { return cProcedureKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//inputs=InputArgList
		public Assignment getInputsAssignment_4() { return cInputsAssignment_4; }

		//InputArgList
		public RuleCall getInputsInputArgListParserRuleCall_4_0() { return cInputsInputArgListParserRuleCall_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//'returns'
		public Keyword getReturnsKeyword_6() { return cReturnsKeyword_6; }

		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//outputs=OutputArgList
		public Assignment getOutputsAssignment_8() { return cOutputsAssignment_8; }

		//OutputArgList
		public RuleCall getOutputsOutputArgListParserRuleCall_8_0() { return cOutputsOutputArgListParserRuleCall_8_0; }

		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }

		//attributeBlock=AttributeBlock
		public Assignment getAttributeBlockAssignment_10() { return cAttributeBlockAssignment_10; }

		//AttributeBlock
		public RuleCall getAttributeBlockAttributeBlockParserRuleCall_10_0() { return cAttributeBlockAttributeBlockParserRuleCall_10_0; }
	}

	public class LocalFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.LocalFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputsInputArgListParserRuleCall_3_0 = (RuleCall)cInputsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cReturnsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutputAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutputOutputArgParserRuleCall_7_0 = (RuleCall)cOutputAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cVarBlockAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cVarBlockVarBlockParserRuleCall_9_0 = (RuleCall)cVarBlockAssignment_9.eContents().get(0);
		private final Keyword cEquationsKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cEquationBlockAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cEquationBlockEquationBlockParserRuleCall_11_0 = (RuleCall)cEquationBlockAssignment_11.eContents().get(0);
		
		//LocalFunction:
		//	'function' name=ID '(' inputs=InputArgList ')' 'returns' '(' output=OutputArg ')'
		//	varBlock=VarBlock 'equations' equationBlock=EquationBlock;
		@Override public ParserRule getRule() { return rule; }

		//'function' name=ID '(' inputs=InputArgList ')' 'returns' '(' output=OutputArg ')' varBlock=VarBlock 'equations'
		//equationBlock=EquationBlock
		public Group getGroup() { return cGroup; }

		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inputs=InputArgList
		public Assignment getInputsAssignment_3() { return cInputsAssignment_3; }

		//InputArgList
		public RuleCall getInputsInputArgListParserRuleCall_3_0() { return cInputsInputArgListParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//'returns'
		public Keyword getReturnsKeyword_5() { return cReturnsKeyword_5; }

		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//output=OutputArg
		public Assignment getOutputAssignment_7() { return cOutputAssignment_7; }

		//OutputArg
		public RuleCall getOutputOutputArgParserRuleCall_7_0() { return cOutputOutputArgParserRuleCall_7_0; }

		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//varBlock=VarBlock
		public Assignment getVarBlockAssignment_9() { return cVarBlockAssignment_9; }

		//VarBlock
		public RuleCall getVarBlockVarBlockParserRuleCall_9_0() { return cVarBlockVarBlockParserRuleCall_9_0; }

		//'equations'
		public Keyword getEquationsKeyword_10() { return cEquationsKeyword_10; }

		//equationBlock=EquationBlock
		public Assignment getEquationBlockAssignment_11() { return cEquationBlockAssignment_11; }

		//EquationBlock
		public RuleCall getEquationBlockEquationBlockParserRuleCall_11_0() { return cEquationBlockEquationBlockParserRuleCall_11_0; }
	}

	public class LocalProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.LocalProcedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputsInputArgListParserRuleCall_3_0 = (RuleCall)cInputsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cReturnsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutputsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutputsOutputArgListParserRuleCall_7_0 = (RuleCall)cOutputsAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cVarBlockAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cVarBlockVarBlockParserRuleCall_9_0 = (RuleCall)cVarBlockAssignment_9.eContents().get(0);
		private final Assignment cAttributeBlockAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAttributeBlockAttributeBlockParserRuleCall_10_0 = (RuleCall)cAttributeBlockAssignment_10.eContents().get(0);
		private final Keyword cStatementsKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cStatementblockAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cStatementblockStatementBlockParserRuleCall_12_0 = (RuleCall)cStatementblockAssignment_12.eContents().get(0);
		
		//LocalProcedure:
		//	'procedure' name=ID '(' inputs=InputArgList ')' 'returns' '(' outputs=OutputArgList ')'
		//	varBlock=VarBlock attributeBlock=AttributeBlock 'statements' statementblock=StatementBlock;
		@Override public ParserRule getRule() { return rule; }

		//'procedure' name=ID '(' inputs=InputArgList ')' 'returns' '(' outputs=OutputArgList ')' varBlock=VarBlock
		//attributeBlock=AttributeBlock 'statements' statementblock=StatementBlock
		public Group getGroup() { return cGroup; }

		//'procedure'
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inputs=InputArgList
		public Assignment getInputsAssignment_3() { return cInputsAssignment_3; }

		//InputArgList
		public RuleCall getInputsInputArgListParserRuleCall_3_0() { return cInputsInputArgListParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//'returns'
		public Keyword getReturnsKeyword_5() { return cReturnsKeyword_5; }

		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//outputs=OutputArgList
		public Assignment getOutputsAssignment_7() { return cOutputsAssignment_7; }

		//OutputArgList
		public RuleCall getOutputsOutputArgListParserRuleCall_7_0() { return cOutputsOutputArgListParserRuleCall_7_0; }

		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//varBlock=VarBlock
		public Assignment getVarBlockAssignment_9() { return cVarBlockAssignment_9; }

		//VarBlock
		public RuleCall getVarBlockVarBlockParserRuleCall_9_0() { return cVarBlockVarBlockParserRuleCall_9_0; }

		//attributeBlock=AttributeBlock
		public Assignment getAttributeBlockAssignment_10() { return cAttributeBlockAssignment_10; }

		//AttributeBlock
		public RuleCall getAttributeBlockAttributeBlockParserRuleCall_10_0() { return cAttributeBlockAttributeBlockParserRuleCall_10_0; }

		//'statements'
		public Keyword getStatementsKeyword_11() { return cStatementsKeyword_11; }

		//statementblock=StatementBlock
		public Assignment getStatementblockAssignment_12() { return cStatementblockAssignment_12; }

		//StatementBlock
		public RuleCall getStatementblockStatementBlockParserRuleCall_12_0() { return cStatementblockStatementBlockParserRuleCall_12_0; }
	}

	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.TypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeAliasAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTypeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cTypeAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_0_4_0 = (RuleCall)cTypeAssignment_0_4.eContents().get(0);
		private final RuleCall cEnumTypeDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRecordTypeDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArrayTypeDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAbstractTypeDefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TypeDeclaration:
		//	{TypeAlias} 'type' name=ID '=' type=Type | EnumTypeDef
		//	| RecordTypeDef
		//	| ArrayTypeDef
		//	| AbstractTypeDef;
		@Override public ParserRule getRule() { return rule; }

		//{TypeAlias} 'type' name=ID '=' type=Type | EnumTypeDef | RecordTypeDef | ArrayTypeDef | AbstractTypeDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//{TypeAlias} 'type' name=ID '=' type=Type
		public Group getGroup_0() { return cGroup_0; }

		//{TypeAlias}
		public Action getTypeAliasAction_0_0() { return cTypeAliasAction_0_0; }

		//'type'
		public Keyword getTypeKeyword_0_1() { return cTypeKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_3() { return cEqualsSignKeyword_0_3; }

		//type=Type
		public Assignment getTypeAssignment_0_4() { return cTypeAssignment_0_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_4_0() { return cTypeTypeParserRuleCall_0_4_0; }

		//EnumTypeDef
		public RuleCall getEnumTypeDefParserRuleCall_1() { return cEnumTypeDefParserRuleCall_1; }

		//RecordTypeDef
		public RuleCall getRecordTypeDefParserRuleCall_2() { return cRecordTypeDefParserRuleCall_2; }

		//ArrayTypeDef
		public RuleCall getArrayTypeDefParserRuleCall_3() { return cArrayTypeDefParserRuleCall_3; }

		//AbstractTypeDef
		public RuleCall getAbstractTypeDefParserRuleCall_4() { return cAbstractTypeDefParserRuleCall_4; }
	}

	public class VarBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.VarBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSomeVarBlockAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cVarKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cLocalsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cLocalsLocalArgParserRuleCall_0_3_0 = (RuleCall)cLocalsAssignment_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Action cNoVarBlockAction_1 = (Action)cAlternatives.eContents().get(1);
		
		//VarBlock:
		//	{SomeVarBlock} 'var' '{' locals+=LocalArg* '}'
		//	| {NoVarBlock};
		@Override public ParserRule getRule() { return rule; }

		//{SomeVarBlock} 'var' '{' locals+=LocalArg* '}' | {NoVarBlock}
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SomeVarBlock} 'var' '{' locals+=LocalArg* '}'
		public Group getGroup_0() { return cGroup_0; }

		//{SomeVarBlock}
		public Action getSomeVarBlockAction_0_0() { return cSomeVarBlockAction_0_0; }

		//'var'
		public Keyword getVarKeyword_0_1() { return cVarKeyword_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//locals+=LocalArg*
		public Assignment getLocalsAssignment_0_3() { return cLocalsAssignment_0_3; }

		//LocalArg
		public RuleCall getLocalsLocalArgParserRuleCall_0_3_0() { return cLocalsLocalArgParserRuleCall_0_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }

		//{NoVarBlock}
		public Action getNoVarBlockAction_1() { return cNoVarBlockAction_1; }
	}

	public class EnumTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.EnumTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEnumerationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEnumerationsEnumValueParserRuleCall_5_0 = (RuleCall)cEnumerationsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cEnumerationsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cEnumerationsEnumValueParserRuleCall_6_1_0 = (RuleCall)cEnumerationsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EnumTypeDef:
		//	'type' 'enum' name=ID '=' '{' enumerations+=EnumValue (',' enumerations+=EnumValue)* '}';
		@Override public ParserRule getRule() { return rule; }

		//'type' 'enum' name=ID '=' '{' enumerations+=EnumValue (',' enumerations+=EnumValue)* '}'
		public Group getGroup() { return cGroup; }

		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//'enum'
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//enumerations+=EnumValue
		public Assignment getEnumerationsAssignment_5() { return cEnumerationsAssignment_5; }

		//EnumValue
		public RuleCall getEnumerationsEnumValueParserRuleCall_5_0() { return cEnumerationsEnumValueParserRuleCall_5_0; }

		//(',' enumerations+=EnumValue)*
		public Group getGroup_6() { return cGroup_6; }

		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//enumerations+=EnumValue
		public Assignment getEnumerationsAssignment_6_1() { return cEnumerationsAssignment_6_1; }

		//EnumValue
		public RuleCall getEnumerationsEnumValueParserRuleCall_6_1_0() { return cEnumerationsEnumValueParserRuleCall_6_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.EnumValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumValue:
		//	{EnumValue} name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{EnumValue} name=ID
		public Group getGroup() { return cGroup; }

		//{EnumValue}
		public Action getEnumValueAction_0() { return cEnumValueAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class RecordTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.RecordTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRecordKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFieldsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldsRecordFieldTypeParserRuleCall_5_0 = (RuleCall)cFieldsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFieldsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFieldsRecordFieldTypeParserRuleCall_6_1_0 = (RuleCall)cFieldsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RecordTypeDef:
		//	'type' 'record' name=ID '=' '{' fields+=RecordFieldType (',' fields+=RecordFieldType)* '}';
		@Override public ParserRule getRule() { return rule; }

		//'type' 'record' name=ID '=' '{' fields+=RecordFieldType (',' fields+=RecordFieldType)* '}'
		public Group getGroup() { return cGroup; }

		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//'record'
		public Keyword getRecordKeyword_1() { return cRecordKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//fields+=RecordFieldType
		public Assignment getFieldsAssignment_5() { return cFieldsAssignment_5; }

		//RecordFieldType
		public RuleCall getFieldsRecordFieldTypeParserRuleCall_5_0() { return cFieldsRecordFieldTypeParserRuleCall_5_0; }

		//(',' fields+=RecordFieldType)*
		public Group getGroup_6() { return cGroup_6; }

		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//fields+=RecordFieldType
		public Assignment getFieldsAssignment_6_1() { return cFieldsAssignment_6_1; }

		//RecordFieldType
		public RuleCall getFieldsRecordFieldTypeParserRuleCall_6_1_0() { return cFieldsRecordFieldTypeParserRuleCall_6_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ArrayTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ArrayTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBaseTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBaseTypeTypeParserRuleCall_4_0 = (RuleCall)cBaseTypeAssignment_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSizeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSizeINTTerminalRuleCall_6_0 = (RuleCall)cSizeAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ArrayTypeDef:
		//	'type' 'array' name=ID '=' baseType=Type '[' size=INT ']';
		@Override public ParserRule getRule() { return rule; }

		//'type' 'array' name=ID '=' baseType=Type '[' size=INT ']'
		public Group getGroup() { return cGroup; }

		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//'array'
		public Keyword getArrayKeyword_1() { return cArrayKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//baseType=Type
		public Assignment getBaseTypeAssignment_4() { return cBaseTypeAssignment_4; }

		//Type
		public RuleCall getBaseTypeTypeParserRuleCall_4_0() { return cBaseTypeTypeParserRuleCall_4_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//size=INT
		public Assignment getSizeAssignment_6() { return cSizeAssignment_6; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_6_0() { return cSizeINTTerminalRuleCall_6_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class AbstractTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.AbstractTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAbstractKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//AbstractTypeDef:
		//	'type' 'abstract' name=ID;
		@Override public ParserRule getRule() { return rule; }

		//'type' 'abstract' name=ID
		public Group getGroup() { return cGroup; }

		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//'abstract'
		public Keyword getAbstractKeyword_1() { return cAbstractKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class RecordFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.RecordFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldNameIDTerminalRuleCall_0_0 = (RuleCall)cFieldNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldTypeTypeParserRuleCall_2_0 = (RuleCall)cFieldTypeAssignment_2.eContents().get(0);
		
		//RecordFieldType:
		//	fieldName=ID ':' fieldType=Type;
		@Override public ParserRule getRule() { return rule; }

		//fieldName=ID ':' fieldType=Type
		public Group getGroup() { return cGroup; }

		//fieldName=ID
		public Assignment getFieldNameAssignment_0() { return cFieldNameAssignment_0; }

		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_0_0() { return cFieldNameIDTerminalRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//fieldType=Type
		public Assignment getFieldTypeAssignment_2() { return cFieldTypeAssignment_2; }

		//Type
		public RuleCall getFieldTypeTypeParserRuleCall_2_0() { return cFieldTypeTypeParserRuleCall_2_0; }
	}

	public class ConstantDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ConstantDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExprAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_4_1_0 = (RuleCall)cExprAssignment_4_1.eContents().get(0);
		
		//ConstantDeclaration:
		//	'constant' name=ID ':' type=Type ('=' expr=Expr)?;
		@Override public ParserRule getRule() { return rule; }

		//'constant' name=ID ':' type=Type ('=' expr=Expr)?
		public Group getGroup() { return cGroup; }

		//'constant'
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }

		//('=' expr=Expr)?
		public Group getGroup_4() { return cGroup_4; }

		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//expr=Expr
		public Assignment getExprAssignment_4_1() { return cExprAssignment_4_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_1_0() { return cExprExprParserRuleCall_4_1_0; }
	}

	public class GlobalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.GlobalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//GlobalDeclaration:
		//	'global' name=ID ':' type=Type;
		@Override public ParserRule getRule() { return rule; }

		//'global' name=ID ':' type=Type
		public Group getGroup() { return cGroup; }

		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}

	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.VariableRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputArgParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalArgParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOutputArgParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstantDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGlobalDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnumValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//VariableRef:
		//	InputArg
		//	| LocalArg
		//	| OutputArg
		//	| ConstantDeclaration
		//	| GlobalDeclaration
		//	| EnumValue;
		@Override public ParserRule getRule() { return rule; }

		//InputArg | LocalArg | OutputArg | ConstantDeclaration | GlobalDeclaration | EnumValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputArg
		public RuleCall getInputArgParserRuleCall_0() { return cInputArgParserRuleCall_0; }

		//LocalArg
		public RuleCall getLocalArgParserRuleCall_1() { return cLocalArgParserRuleCall_1; }

		//OutputArg
		public RuleCall getOutputArgParserRuleCall_2() { return cOutputArgParserRuleCall_2; }

		//ConstantDeclaration
		public RuleCall getConstantDeclarationParserRuleCall_3() { return cConstantDeclarationParserRuleCall_3; }

		//GlobalDeclaration
		public RuleCall getGlobalDeclarationParserRuleCall_4() { return cGlobalDeclarationParserRuleCall_4; }

		//EnumValue
		public RuleCall getEnumValueParserRuleCall_5() { return cEnumValueParserRuleCall_5; }
	}

	public class InputArgListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.InputArgList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputArgListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cInputArgsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInputArgsInputArgParserRuleCall_1_0_0 = (RuleCall)cInputArgsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cInputArgsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cInputArgsInputArgParserRuleCall_1_1_1_0 = (RuleCall)cInputArgsAssignment_1_1_1.eContents().get(0);
		
		//InputArgList:
		//	{InputArgList} (inputArgs+=InputArg (',' inputArgs+=InputArg)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{InputArgList} (inputArgs+=InputArg (',' inputArgs+=InputArg)*)?
		public Group getGroup() { return cGroup; }

		//{InputArgList}
		public Action getInputArgListAction_0() { return cInputArgListAction_0; }

		//(inputArgs+=InputArg (',' inputArgs+=InputArg)*)?
		public Group getGroup_1() { return cGroup_1; }

		//inputArgs+=InputArg
		public Assignment getInputArgsAssignment_1_0() { return cInputArgsAssignment_1_0; }

		//InputArg
		public RuleCall getInputArgsInputArgParserRuleCall_1_0_0() { return cInputArgsInputArgParserRuleCall_1_0_0; }

		//(',' inputArgs+=InputArg)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//inputArgs+=InputArg
		public Assignment getInputArgsAssignment_1_1_1() { return cInputArgsAssignment_1_1_1; }

		//InputArg
		public RuleCall getInputArgsInputArgParserRuleCall_1_1_1_0() { return cInputArgsInputArgParserRuleCall_1_1_1_0; }
	}

	public class InputArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.InputArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//InputArg:
		//	name=ID ':' type=Type;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class LocalArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.LocalArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LocalArg:
		//	name=ID ':' type=Type ';';
		@Override public ParserRule getRule() { return rule; }

		//name=ID ':' type=Type ';'
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class OutputArgListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.OutputArgList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputArgListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOutputArgsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOutputArgsOutputArgParserRuleCall_1_0_0 = (RuleCall)cOutputArgsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOutputArgsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOutputArgsOutputArgParserRuleCall_1_1_1_0 = (RuleCall)cOutputArgsAssignment_1_1_1.eContents().get(0);
		
		//OutputArgList:
		//	{OutputArgList} (outputArgs+=OutputArg (',' outputArgs+=OutputArg)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{OutputArgList} (outputArgs+=OutputArg (',' outputArgs+=OutputArg)*)?
		public Group getGroup() { return cGroup; }

		//{OutputArgList}
		public Action getOutputArgListAction_0() { return cOutputArgListAction_0; }

		//(outputArgs+=OutputArg (',' outputArgs+=OutputArg)*)?
		public Group getGroup_1() { return cGroup_1; }

		//outputArgs+=OutputArg
		public Assignment getOutputArgsAssignment_1_0() { return cOutputArgsAssignment_1_0; }

		//OutputArg
		public RuleCall getOutputArgsOutputArgParserRuleCall_1_0_0() { return cOutputArgsOutputArgParserRuleCall_1_0_0; }

		//(',' outputArgs+=OutputArg)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//outputArgs+=OutputArg
		public Assignment getOutputArgsAssignment_1_1_1() { return cOutputArgsAssignment_1_1_1; }

		//OutputArg
		public RuleCall getOutputArgsOutputArgParserRuleCall_1_1_1_0() { return cOutputArgsOutputArgParserRuleCall_1_1_1_0; }
	}

	public class OutputArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.OutputArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//OutputArg:
		//	name=ID ':' type=Type;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVoidTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cVoidKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBoolKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntegerTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cIntKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cRealTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cRealKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cStringTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cStringKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cEnumTypeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cEnumKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEnumDefAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cEnumDefEnumTypeDefCrossReference_5_2_0 = (CrossReference)cEnumDefAssignment_5_2.eContents().get(0);
		private final RuleCall cEnumDefEnumTypeDefIDTerminalRuleCall_5_2_0_1 = (RuleCall)cEnumDefEnumTypeDefCrossReference_5_2_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cRecordTypeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cRecordKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRecordDefAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cRecordDefRecordTypeDefCrossReference_6_2_0 = (CrossReference)cRecordDefAssignment_6_2.eContents().get(0);
		private final RuleCall cRecordDefRecordTypeDefIDTerminalRuleCall_6_2_0_1 = (RuleCall)cRecordDefRecordTypeDefCrossReference_6_2_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cArrayTypeAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cArrayKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cArrayDefAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cArrayDefArrayTypeDefCrossReference_7_2_0 = (CrossReference)cArrayDefAssignment_7_2.eContents().get(0);
		private final RuleCall cArrayDefArrayTypeDefIDTerminalRuleCall_7_2_0_1 = (RuleCall)cArrayDefArrayTypeDefCrossReference_7_2_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cAbstractTypeAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cAbstractKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cAbstractDefAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final CrossReference cAbstractDefAbstractTypeDefCrossReference_8_2_0 = (CrossReference)cAbstractDefAssignment_8_2.eContents().get(0);
		private final RuleCall cAbstractDefAbstractTypeDefIDTerminalRuleCall_8_2_0_1 = (RuleCall)cAbstractDefAbstractTypeDefCrossReference_8_2_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cNamedTypeAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cAliasAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cAliasTypeAliasCrossReference_9_1_0 = (CrossReference)cAliasAssignment_9_1.eContents().get(0);
		private final RuleCall cAliasTypeAliasIDTerminalRuleCall_9_1_0_1 = (RuleCall)cAliasTypeAliasCrossReference_9_1_0.eContents().get(1);
		
		//Type:
		//	{VoidType} 'void'
		//	| {BoolType} 'bool'
		//	| {IntegerType} 'int'
		//	| {RealType} 'real'
		//	| {StringType} 'string'
		//	| {EnumType} 'enum' enumDef=[EnumTypeDef] | {RecordType} 'record' recordDef=[RecordTypeDef] | {ArrayType} 'array'
		//	arrayDef=[ArrayTypeDef] | {AbstractType} 'abstract' abstractDef=[AbstractTypeDef] | {NamedType} alias=[TypeAlias];
		@Override public ParserRule getRule() { return rule; }

		//{VoidType} 'void' | {BoolType} 'bool' | {IntegerType} 'int' | {RealType} 'real' | {StringType} 'string' | {EnumType}
		//'enum' enumDef=[EnumTypeDef] | {RecordType} 'record' recordDef=[RecordTypeDef] | {ArrayType} 'array'
		//arrayDef=[ArrayTypeDef] | {AbstractType} 'abstract' abstractDef=[AbstractTypeDef] | {NamedType} alias=[TypeAlias]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{VoidType} 'void'
		public Group getGroup_0() { return cGroup_0; }

		//{VoidType}
		public Action getVoidTypeAction_0_0() { return cVoidTypeAction_0_0; }

		//'void'
		public Keyword getVoidKeyword_0_1() { return cVoidKeyword_0_1; }

		//{BoolType} 'bool'
		public Group getGroup_1() { return cGroup_1; }

		//{BoolType}
		public Action getBoolTypeAction_1_0() { return cBoolTypeAction_1_0; }

		//'bool'
		public Keyword getBoolKeyword_1_1() { return cBoolKeyword_1_1; }

		//{IntegerType} 'int'
		public Group getGroup_2() { return cGroup_2; }

		//{IntegerType}
		public Action getIntegerTypeAction_2_0() { return cIntegerTypeAction_2_0; }

		//'int'
		public Keyword getIntKeyword_2_1() { return cIntKeyword_2_1; }

		//{RealType} 'real'
		public Group getGroup_3() { return cGroup_3; }

		//{RealType}
		public Action getRealTypeAction_3_0() { return cRealTypeAction_3_0; }

		//'real'
		public Keyword getRealKeyword_3_1() { return cRealKeyword_3_1; }

		//{StringType} 'string'
		public Group getGroup_4() { return cGroup_4; }

		//{StringType}
		public Action getStringTypeAction_4_0() { return cStringTypeAction_4_0; }

		//'string'
		public Keyword getStringKeyword_4_1() { return cStringKeyword_4_1; }

		//{EnumType} 'enum' enumDef=[EnumTypeDef]
		public Group getGroup_5() { return cGroup_5; }

		//{EnumType}
		public Action getEnumTypeAction_5_0() { return cEnumTypeAction_5_0; }

		//'enum'
		public Keyword getEnumKeyword_5_1() { return cEnumKeyword_5_1; }

		//enumDef=[EnumTypeDef]
		public Assignment getEnumDefAssignment_5_2() { return cEnumDefAssignment_5_2; }

		//[EnumTypeDef]
		public CrossReference getEnumDefEnumTypeDefCrossReference_5_2_0() { return cEnumDefEnumTypeDefCrossReference_5_2_0; }

		//ID
		public RuleCall getEnumDefEnumTypeDefIDTerminalRuleCall_5_2_0_1() { return cEnumDefEnumTypeDefIDTerminalRuleCall_5_2_0_1; }

		//{RecordType} 'record' recordDef=[RecordTypeDef]
		public Group getGroup_6() { return cGroup_6; }

		//{RecordType}
		public Action getRecordTypeAction_6_0() { return cRecordTypeAction_6_0; }

		//'record'
		public Keyword getRecordKeyword_6_1() { return cRecordKeyword_6_1; }

		//recordDef=[RecordTypeDef]
		public Assignment getRecordDefAssignment_6_2() { return cRecordDefAssignment_6_2; }

		//[RecordTypeDef]
		public CrossReference getRecordDefRecordTypeDefCrossReference_6_2_0() { return cRecordDefRecordTypeDefCrossReference_6_2_0; }

		//ID
		public RuleCall getRecordDefRecordTypeDefIDTerminalRuleCall_6_2_0_1() { return cRecordDefRecordTypeDefIDTerminalRuleCall_6_2_0_1; }

		//{ArrayType} 'array' arrayDef=[ArrayTypeDef]
		public Group getGroup_7() { return cGroup_7; }

		//{ArrayType}
		public Action getArrayTypeAction_7_0() { return cArrayTypeAction_7_0; }

		//'array'
		public Keyword getArrayKeyword_7_1() { return cArrayKeyword_7_1; }

		//arrayDef=[ArrayTypeDef]
		public Assignment getArrayDefAssignment_7_2() { return cArrayDefAssignment_7_2; }

		//[ArrayTypeDef]
		public CrossReference getArrayDefArrayTypeDefCrossReference_7_2_0() { return cArrayDefArrayTypeDefCrossReference_7_2_0; }

		//ID
		public RuleCall getArrayDefArrayTypeDefIDTerminalRuleCall_7_2_0_1() { return cArrayDefArrayTypeDefIDTerminalRuleCall_7_2_0_1; }

		//{AbstractType} 'abstract' abstractDef=[AbstractTypeDef]
		public Group getGroup_8() { return cGroup_8; }

		//{AbstractType}
		public Action getAbstractTypeAction_8_0() { return cAbstractTypeAction_8_0; }

		//'abstract'
		public Keyword getAbstractKeyword_8_1() { return cAbstractKeyword_8_1; }

		//abstractDef=[AbstractTypeDef]
		public Assignment getAbstractDefAssignment_8_2() { return cAbstractDefAssignment_8_2; }

		//[AbstractTypeDef]
		public CrossReference getAbstractDefAbstractTypeDefCrossReference_8_2_0() { return cAbstractDefAbstractTypeDefCrossReference_8_2_0; }

		//ID
		public RuleCall getAbstractDefAbstractTypeDefIDTerminalRuleCall_8_2_0_1() { return cAbstractDefAbstractTypeDefIDTerminalRuleCall_8_2_0_1; }

		//{NamedType} alias=[TypeAlias]
		public Group getGroup_9() { return cGroup_9; }

		//{NamedType}
		public Action getNamedTypeAction_9_0() { return cNamedTypeAction_9_0; }

		//alias=[TypeAlias]
		public Assignment getAliasAssignment_9_1() { return cAliasAssignment_9_1; }

		//[TypeAlias]
		public CrossReference getAliasTypeAliasCrossReference_9_1_0() { return cAliasTypeAliasCrossReference_9_1_0; }

		//ID
		public RuleCall getAliasTypeAliasIDTerminalRuleCall_9_1_0_1() { return cAliasTypeAliasIDTerminalRuleCall_9_1_0_1; }
	}

	public class AttributeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.AttributeBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSomeAttributeBlockAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAttributesKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cAttributeListAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cAttributeListAttributeParserRuleCall_0_3_0 = (RuleCall)cAttributeListAssignment_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Action cNoAttributeBlockAction_1 = (Action)cAlternatives.eContents().get(1);
		
		//AttributeBlock:
		//	{SomeAttributeBlock} 'attributes' '{' attributeList+=Attribute* '}'
		//	| {NoAttributeBlock};
		@Override public ParserRule getRule() { return rule; }

		//{SomeAttributeBlock} 'attributes' '{' attributeList+=Attribute* '}' | {NoAttributeBlock}
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SomeAttributeBlock} 'attributes' '{' attributeList+=Attribute* '}'
		public Group getGroup_0() { return cGroup_0; }

		//{SomeAttributeBlock}
		public Action getSomeAttributeBlockAction_0_0() { return cSomeAttributeBlockAction_0_0; }

		//'attributes'
		public Keyword getAttributesKeyword_0_1() { return cAttributesKeyword_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//attributeList+=Attribute*
		public Assignment getAttributeListAssignment_0_3() { return cAttributeListAssignment_0_3; }

		//Attribute
		public RuleCall getAttributeListAttributeParserRuleCall_0_3_0() { return cAttributeListAttributeParserRuleCall_0_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }

		//{NoAttributeBlock}
		public Action getNoAttributeBlockAction_1() { return cNoAttributeBlockAction_1; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreconditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPostconditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUsesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Attribute:
		//	Precondition
		//	| Postcondition
		//	| Define
		//	| Uses;
		@Override public ParserRule getRule() { return rule; }

		//Precondition | Postcondition | Define | Uses
		public Alternatives getAlternatives() { return cAlternatives; }

		//Precondition
		public RuleCall getPreconditionParserRuleCall_0() { return cPreconditionParserRuleCall_0; }

		//Postcondition
		public RuleCall getPostconditionParserRuleCall_1() { return cPostconditionParserRuleCall_1; }

		//Define
		public RuleCall getDefineParserRuleCall_2() { return cDefineParserRuleCall_2; }

		//Uses
		public RuleCall getUsesParserRuleCall_3() { return cUsesParserRuleCall_3; }
	}

	public class PreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Precondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Precondition:
		//	'precondition' name=ID '=' expr=Expr ';';
		@Override public ParserRule getRule() { return rule; }

		//'precondition' name=ID '=' expr=Expr ';'
		public Group getGroup() { return cGroup; }

		//'precondition'
		public Keyword getPreconditionKeyword_0() { return cPreconditionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expr=Expr
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_3_0() { return cExprExprParserRuleCall_3_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class PostconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Postcondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Postcondition:
		//	'postcondition' name=ID '=' expr=Expr ';';
		@Override public ParserRule getRule() { return rule; }

		//'postcondition' name=ID '=' expr=Expr ';'
		public Group getGroup() { return cGroup; }

		//'postcondition'
		public Keyword getPostconditionKeyword_0() { return cPostconditionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expr=Expr
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_3_0() { return cExprExprParserRuleCall_3_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class DefineUseRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.DefineUseRef");
		private final Assignment cReferenceExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReferenceExprExprParserRuleCall_0 = (RuleCall)cReferenceExprAssignment.eContents().get(0);
		
		//DefineUseRef:
		//	referenceExpr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//referenceExpr=Expr
		public Assignment getReferenceExprAssignment() { return cReferenceExprAssignment; }

		//Expr
		public RuleCall getReferenceExprExprParserRuleCall_0() { return cReferenceExprExprParserRuleCall_0; }
	}

	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefinesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsDefineUseRefParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsDefineUseRefParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Define:
		//	'defines' elements+=DefineUseRef (',' elements+=DefineUseRef)* ';';
		@Override public ParserRule getRule() { return rule; }

		//'defines' elements+=DefineUseRef (',' elements+=DefineUseRef)* ';'
		public Group getGroup() { return cGroup; }

		//'defines'
		public Keyword getDefinesKeyword_0() { return cDefinesKeyword_0; }

		//elements+=DefineUseRef
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//DefineUseRef
		public RuleCall getElementsDefineUseRefParserRuleCall_1_0() { return cElementsDefineUseRefParserRuleCall_1_0; }

		//(',' elements+=DefineUseRef)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//elements+=DefineUseRef
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }

		//DefineUseRef
		public RuleCall getElementsDefineUseRefParserRuleCall_2_1_0() { return cElementsDefineUseRefParserRuleCall_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class UsesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Uses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsDefineUseRefParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsDefineUseRefParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Uses:
		//	'uses' elements+=DefineUseRef (',' elements+=DefineUseRef)* ';';
		@Override public ParserRule getRule() { return rule; }

		//'uses' elements+=DefineUseRef (',' elements+=DefineUseRef)* ';'
		public Group getGroup() { return cGroup; }

		//'uses'
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }

		//elements+=DefineUseRef
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//DefineUseRef
		public RuleCall getElementsDefineUseRefParserRuleCall_1_0() { return cElementsDefineUseRefParserRuleCall_1_0; }

		//(',' elements+=DefineUseRef)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//elements+=DefineUseRef
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }

		//DefineUseRef
		public RuleCall getElementsDefineUseRefParserRuleCall_2_1_0() { return cElementsDefineUseRefParserRuleCall_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class StatementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.StatementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StatementBlock:
		//	{StatementBlock} '{' statements+=Statement* '}';
		@Override public ParserRule getRule() { return rule; }

		//{StatementBlock} '{' statements+=Statement* '}'
		public Group getGroup() { return cGroup; }

		//{StatementBlock}
		public Action getStatementBlockAction_0() { return cStatementBlockAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVoidStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfThenElseStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGotoStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLabelStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cBreakStatementAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cBreakKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cContinueStatementAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cContinueKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cSemicolonKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cReturnStatementAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cReturnKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cSemicolonKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		
		//Statement:
		//	VoidStatement
		//	| AssignmentStatement
		//	| IfThenElseStatement
		//	| WhileStatement
		//	| ForStatement
		//	| GotoStatement
		//	| LabelStatement
		//	| {BreakStatement} 'break' ';'
		//	| {ContinueStatement} 'continue' ';'
		//	| {ReturnStatement} 'return' ';';
		@Override public ParserRule getRule() { return rule; }

		//VoidStatement | AssignmentStatement | IfThenElseStatement | WhileStatement | ForStatement | GotoStatement |
		//LabelStatement | {BreakStatement} 'break' ';' | {ContinueStatement} 'continue' ';' | {ReturnStatement} 'return' ';'
		public Alternatives getAlternatives() { return cAlternatives; }

		//VoidStatement
		public RuleCall getVoidStatementParserRuleCall_0() { return cVoidStatementParserRuleCall_0; }

		//AssignmentStatement
		public RuleCall getAssignmentStatementParserRuleCall_1() { return cAssignmentStatementParserRuleCall_1; }

		//IfThenElseStatement
		public RuleCall getIfThenElseStatementParserRuleCall_2() { return cIfThenElseStatementParserRuleCall_2; }

		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_3() { return cWhileStatementParserRuleCall_3; }

		//ForStatement
		public RuleCall getForStatementParserRuleCall_4() { return cForStatementParserRuleCall_4; }

		//GotoStatement
		public RuleCall getGotoStatementParserRuleCall_5() { return cGotoStatementParserRuleCall_5; }

		//LabelStatement
		public RuleCall getLabelStatementParserRuleCall_6() { return cLabelStatementParserRuleCall_6; }

		//{BreakStatement} 'break' ';'
		public Group getGroup_7() { return cGroup_7; }

		//{BreakStatement}
		public Action getBreakStatementAction_7_0() { return cBreakStatementAction_7_0; }

		//'break'
		public Keyword getBreakKeyword_7_1() { return cBreakKeyword_7_1; }

		//';'
		public Keyword getSemicolonKeyword_7_2() { return cSemicolonKeyword_7_2; }

		//{ContinueStatement} 'continue' ';'
		public Group getGroup_8() { return cGroup_8; }

		//{ContinueStatement}
		public Action getContinueStatementAction_8_0() { return cContinueStatementAction_8_0; }

		//'continue'
		public Keyword getContinueKeyword_8_1() { return cContinueKeyword_8_1; }

		//';'
		public Keyword getSemicolonKeyword_8_2() { return cSemicolonKeyword_8_2; }

		//{ReturnStatement} 'return' ';'
		public Group getGroup_9() { return cGroup_9; }

		//{ReturnStatement}
		public Action getReturnStatementAction_9_0() { return cReturnStatementAction_9_0; }

		//'return'
		public Keyword getReturnKeyword_9_1() { return cReturnKeyword_9_1; }

		//';'
		public Keyword getSemicolonKeyword_9_2() { return cSemicolonKeyword_9_2; }
	}

	public class VoidStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.VoidStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExprParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VoidStatement:
		//	expr=Expr ';';
		@Override public ParserRule getRule() { return rule; }

		//expr=Expr ';'
		public Group getGroup() { return cGroup; }

		//expr=Expr
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_0() { return cExprExprParserRuleCall_0_0; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class AssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.AssignmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdsIdListParserRuleCall_0_0 = (RuleCall)cIdsAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsExprParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AssignmentStatement:
		//	ids=IdList '=' rhs=Expr ';';
		@Override public ParserRule getRule() { return rule; }

		//ids=IdList '=' rhs=Expr ';'
		public Group getGroup() { return cGroup; }

		//ids=IdList
		public Assignment getIdsAssignment_0() { return cIdsAssignment_0; }

		//IdList
		public RuleCall getIdsIdListParserRuleCall_0_0() { return cIdsIdListParserRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//rhs=Expr
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//Expr
		public RuleCall getRhsExprParserRuleCall_2_0() { return cRhsExprParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class IfThenElseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.IfThenElseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenBlockStatementBlockParserRuleCall_3_0 = (RuleCall)cThenBlockAssignment_3.eContents().get(0);
		private final Assignment cElseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseElseParserRuleCall_4_0 = (RuleCall)cElseAssignment_4.eContents().get(0);
		
		//IfThenElseStatement:
		//	'if' cond=Expr 'then' thenBlock=StatementBlock else=Else;
		@Override public ParserRule getRule() { return rule; }

		//'if' cond=Expr 'then' thenBlock=StatementBlock else=Else
		public Group getGroup() { return cGroup; }

		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }

		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//thenBlock=StatementBlock
		public Assignment getThenBlockAssignment_3() { return cThenBlockAssignment_3; }

		//StatementBlock
		public RuleCall getThenBlockStatementBlockParserRuleCall_3_0() { return cThenBlockStatementBlockParserRuleCall_3_0; }

		//else=Else
		public Assignment getElseAssignment_4() { return cElseAssignment_4; }

		//Else
		public RuleCall getElseElseParserRuleCall_4_0() { return cElseElseParserRuleCall_4_0; }
	}

	public class ElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Else");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cElseBlockAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cElseKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cBlockAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cBlockStatementBlockParserRuleCall_0_2_0 = (RuleCall)cBlockAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cElseIfAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cElseKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIfThenElseAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIfThenElseIfThenElseStatementParserRuleCall_1_2_0 = (RuleCall)cIfThenElseAssignment_1_2.eContents().get(0);
		private final Action cNoElseAction_2 = (Action)cAlternatives.eContents().get(2);
		
		//Else:
		//	{ElseBlock} 'else' block=StatementBlock | {ElseIf} 'else' ifThenElse=IfThenElseStatement | {NoElse};
		@Override public ParserRule getRule() { return rule; }

		//{ElseBlock} 'else' block=StatementBlock | {ElseIf} 'else' ifThenElse=IfThenElseStatement | {NoElse}
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ElseBlock} 'else' block=StatementBlock
		public Group getGroup_0() { return cGroup_0; }

		//{ElseBlock}
		public Action getElseBlockAction_0_0() { return cElseBlockAction_0_0; }

		//'else'
		public Keyword getElseKeyword_0_1() { return cElseKeyword_0_1; }

		//block=StatementBlock
		public Assignment getBlockAssignment_0_2() { return cBlockAssignment_0_2; }

		//StatementBlock
		public RuleCall getBlockStatementBlockParserRuleCall_0_2_0() { return cBlockStatementBlockParserRuleCall_0_2_0; }

		//{ElseIf} 'else' ifThenElse=IfThenElseStatement
		public Group getGroup_1() { return cGroup_1; }

		//{ElseIf}
		public Action getElseIfAction_1_0() { return cElseIfAction_1_0; }

		//'else'
		public Keyword getElseKeyword_1_1() { return cElseKeyword_1_1; }

		//ifThenElse=IfThenElseStatement
		public Assignment getIfThenElseAssignment_1_2() { return cIfThenElseAssignment_1_2; }

		//IfThenElseStatement
		public RuleCall getIfThenElseIfThenElseStatementParserRuleCall_1_2_0() { return cIfThenElseIfThenElseStatementParserRuleCall_1_2_0; }

		//{NoElse}
		public Action getNoElseAction_2() { return cNoElseAction_2; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockStatementBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//WhileStatement:
		//	'while' cond=Expr block=StatementBlock;
		@Override public ParserRule getRule() { return rule; }

		//'while' cond=Expr block=StatementBlock
		public Group getGroup() { return cGroup; }

		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }

		//block=StatementBlock
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//StatementBlock
		public RuleCall getBlockStatementBlockParserRuleCall_2_0() { return cBlockStatementBlockParserRuleCall_2_0; }
	}

	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitStatementAssignmentStatementParserRuleCall_2_0 = (RuleCall)cInitStatementAssignment_2.eContents().get(0);
		private final Assignment cLimitExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLimitExprExprParserRuleCall_3_0 = (RuleCall)cLimitExprAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIncrementStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIncrementStatementAssignmentStatementParserRuleCall_5_0 = (RuleCall)cIncrementStatementAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBlockStatementBlockParserRuleCall_7_0 = (RuleCall)cBlockAssignment_7.eContents().get(0);
		
		//ForStatement:
		//	'for' '(' initStatement=AssignmentStatement limitExpr=Expr ';' incrementStatement=AssignmentStatement ')'
		//	block=StatementBlock;
		@Override public ParserRule getRule() { return rule; }

		//'for' '(' initStatement=AssignmentStatement limitExpr=Expr ';' incrementStatement=AssignmentStatement ')'
		//block=StatementBlock
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//initStatement=AssignmentStatement
		public Assignment getInitStatementAssignment_2() { return cInitStatementAssignment_2; }

		//AssignmentStatement
		public RuleCall getInitStatementAssignmentStatementParserRuleCall_2_0() { return cInitStatementAssignmentStatementParserRuleCall_2_0; }

		//limitExpr=Expr
		public Assignment getLimitExprAssignment_3() { return cLimitExprAssignment_3; }

		//Expr
		public RuleCall getLimitExprExprParserRuleCall_3_0() { return cLimitExprExprParserRuleCall_3_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//incrementStatement=AssignmentStatement
		public Assignment getIncrementStatementAssignment_5() { return cIncrementStatementAssignment_5; }

		//AssignmentStatement
		public RuleCall getIncrementStatementAssignmentStatementParserRuleCall_5_0() { return cIncrementStatementAssignmentStatementParserRuleCall_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//block=StatementBlock
		public Assignment getBlockAssignment_7() { return cBlockAssignment_7; }

		//StatementBlock
		public RuleCall getBlockStatementBlockParserRuleCall_7_0() { return cBlockStatementBlockParserRuleCall_7_0; }
	}

	public class LabelStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.LabelStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LabelStatement:
		//	'label' name=ID ';';
		@Override public ParserRule getRule() { return rule; }

		//'label' name=ID ';'
		public Group getGroup() { return cGroup; }

		//'label'
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class GotoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.GotoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGotoStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGotoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLabelLabelStatementCrossReference_2_0 = (CrossReference)cLabelAssignment_2.eContents().get(0);
		private final RuleCall cLabelLabelStatementIDTerminalRuleCall_2_0_1 = (RuleCall)cLabelLabelStatementCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWhenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWhenExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWhenExprExprParserRuleCall_3_1_0 = (RuleCall)cWhenExprAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GotoStatement:
		//	{GotoStatement} 'goto' label=[LabelStatement] ('when' whenExpr=Expr)? ';';
		@Override public ParserRule getRule() { return rule; }

		//{GotoStatement} 'goto' label=[LabelStatement] ('when' whenExpr=Expr)? ';'
		public Group getGroup() { return cGroup; }

		//{GotoStatement}
		public Action getGotoStatementAction_0() { return cGotoStatementAction_0; }

		//'goto'
		public Keyword getGotoKeyword_1() { return cGotoKeyword_1; }

		//label=[LabelStatement]
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//[LabelStatement]
		public CrossReference getLabelLabelStatementCrossReference_2_0() { return cLabelLabelStatementCrossReference_2_0; }

		//ID
		public RuleCall getLabelLabelStatementIDTerminalRuleCall_2_0_1() { return cLabelLabelStatementIDTerminalRuleCall_2_0_1; }

		//('when' whenExpr=Expr)?
		public Group getGroup_3() { return cGroup_3; }

		//'when'
		public Keyword getWhenKeyword_3_0() { return cWhenKeyword_3_0; }

		//whenExpr=Expr
		public Assignment getWhenExprAssignment_3_1() { return cWhenExprAssignment_3_1; }

		//Expr
		public RuleCall getWhenExprExprParserRuleCall_3_1_0() { return cWhenExprExprParserRuleCall_3_1_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class EquationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.EquationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEquationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEquationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEquationsEquationParserRuleCall_2_0 = (RuleCall)cEquationsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EquationBlock:
		//	{EquationBlock} '{' equations+=Equation* '}';
		@Override public ParserRule getRule() { return rule; }

		//{EquationBlock} '{' equations+=Equation* '}'
		public Group getGroup() { return cGroup; }

		//{EquationBlock}
		public Action getEquationBlockAction_0() { return cEquationBlockAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//equations+=Equation*
		public Assignment getEquationsAssignment_2() { return cEquationsAssignment_2; }

		//Equation
		public RuleCall getEquationsEquationParserRuleCall_2_0() { return cEquationsEquationParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Equation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVoidStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Equation:
		//	VoidStatement
		//	| AssignmentStatement;
		@Override public ParserRule getRule() { return rule; }

		//VoidStatement | AssignmentStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//VoidStatement
		public RuleCall getVoidStatementParserRuleCall_0() { return cVoidStatementParserRuleCall_0; }

		//AssignmentStatement
		public RuleCall getAssignmentStatementParserRuleCall_1() { return cAssignmentStatementParserRuleCall_1; }
	}

	public class IdListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.IdList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIdsVariableRefCrossReference_0_0 = (CrossReference)cIdsAssignment_0.eContents().get(0);
		private final RuleCall cIdsVariableRefIDTerminalRuleCall_0_0_1 = (RuleCall)cIdsVariableRefCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cIdsVariableRefCrossReference_1_1_0 = (CrossReference)cIdsAssignment_1_1.eContents().get(0);
		private final RuleCall cIdsVariableRefIDTerminalRuleCall_1_1_0_1 = (RuleCall)cIdsVariableRefCrossReference_1_1_0.eContents().get(1);
		
		//IdList:
		//	ids+=[VariableRef] (',' ids+=[VariableRef])*;
		@Override public ParserRule getRule() { return rule; }

		//ids+=[VariableRef] (',' ids+=[VariableRef])*
		public Group getGroup() { return cGroup; }

		//ids+=[VariableRef]
		public Assignment getIdsAssignment_0() { return cIdsAssignment_0; }

		//[VariableRef]
		public CrossReference getIdsVariableRefCrossReference_0_0() { return cIdsVariableRefCrossReference_0_0; }

		//ID
		public RuleCall getIdsVariableRefIDTerminalRuleCall_0_0_1() { return cIdsVariableRefIDTerminalRuleCall_0_0_1; }

		//(',' ids+=[VariableRef])*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ids+=[VariableRef]
		public Assignment getIdsAssignment_1_1() { return cIdsAssignment_1_1; }

		//[VariableRef]
		public CrossReference getIdsVariableRefCrossReference_1_1_0() { return cIdsVariableRefCrossReference_1_1_0; }

		//ID
		public RuleCall getIdsVariableRefIDTerminalRuleCall_1_1_0_1() { return cIdsVariableRefIDTerminalRuleCall_1_1_0_1; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.Expr");
		private final RuleCall cIfThenElseExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	IfThenElseExpr;
		@Override public ParserRule getRule() { return rule; }

		//IfThenElseExpr
		public RuleCall getIfThenElseExprParserRuleCall() { return cIfThenElseExprParserRuleCall; }
	}

	public class IfThenElseExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.IfThenElseExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cChoiceExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cIfThenElseExprCondExprAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cThenExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cThenExprExprParserRuleCall_1_1_0 = (RuleCall)cThenExprAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cElseExprAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cElseExprExprParserRuleCall_1_3_0 = (RuleCall)cElseExprAssignment_1_3.eContents().get(0);
		
		//IfThenElseExpr Expr:
		//	ChoiceExpr (=> ({IfThenElseExpr.condExpr=current} '?') thenExpr=Expr ':' elseExpr=Expr)?
		@Override public ParserRule getRule() { return rule; }

		//ChoiceExpr (=> ({IfThenElseExpr.condExpr=current} '?') thenExpr=Expr ':' elseExpr=Expr)?
		public Group getGroup() { return cGroup; }

		//ChoiceExpr
		public RuleCall getChoiceExprParserRuleCall_0() { return cChoiceExprParserRuleCall_0; }

		//(=> ({IfThenElseExpr.condExpr=current} '?') thenExpr=Expr ':' elseExpr=Expr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({IfThenElseExpr.condExpr=current} '?')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({IfThenElseExpr.condExpr=current} '?')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{IfThenElseExpr.condExpr=current}
		public Action getIfThenElseExprCondExprAction_1_0_0_0() { return cIfThenElseExprCondExprAction_1_0_0_0; }

		//'?'
		public Keyword getQuestionMarkKeyword_1_0_0_1() { return cQuestionMarkKeyword_1_0_0_1; }

		//thenExpr=Expr
		public Assignment getThenExprAssignment_1_1() { return cThenExprAssignment_1_1; }

		//Expr
		public RuleCall getThenExprExprParserRuleCall_1_1_0() { return cThenExprExprParserRuleCall_1_1_0; }

		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//elseExpr=Expr
		public Assignment getElseExprAssignment_1_3() { return cElseExprAssignment_1_3; }

		//Expr
		public RuleCall getElseExprExprParserRuleCall_1_3_0() { return cElseExprExprParserRuleCall_1_3_0; }
	}

	public class ChoiceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ChoiceExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cChoiceExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cChoiceKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFirstAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cFirstExprParserRuleCall_0_3_0 = (RuleCall)cFirstAssignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cSecondAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cSecondExprParserRuleCall_0_5_0 = (RuleCall)cSecondAssignment_0_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final RuleCall cImpliesExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ChoiceExpr Expr:
		//	{ChoiceExpr} 'choice' '(' first=Expr ',' second=Expr ')' //analysis cannot be run if a spec contains this
		//	| ImpliesExpr
		@Override public ParserRule getRule() { return rule; }

		//{ChoiceExpr} 'choice' '(' first=Expr ',' second=Expr ')' //analysis cannot be run if a spec contains this
		//| ImpliesExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ChoiceExpr} 'choice' '(' first=Expr ',' second=Expr ')'
		public Group getGroup_0() { return cGroup_0; }

		//{ChoiceExpr}
		public Action getChoiceExprAction_0_0() { return cChoiceExprAction_0_0; }

		//'choice'
		public Keyword getChoiceKeyword_0_1() { return cChoiceKeyword_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//first=Expr
		public Assignment getFirstAssignment_0_3() { return cFirstAssignment_0_3; }

		//Expr
		public RuleCall getFirstExprParserRuleCall_0_3_0() { return cFirstExprParserRuleCall_0_3_0; }

		//','
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }

		//second=Expr
		public Assignment getSecondAssignment_0_5() { return cSecondAssignment_0_5; }

		//Expr
		public RuleCall getSecondExprParserRuleCall_0_5_0() { return cSecondExprParserRuleCall_0_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }

		//ImpliesExpr
		public RuleCall getImpliesExprParserRuleCall_1() { return cImpliesExprParserRuleCall_1; }
	}

	public class ImpliesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ImpliesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightImpliesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ImpliesExpr Expr:
		//	OrExpr (=> ({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?
		@Override public ParserRule getRule() { return rule; }

		//OrExpr (=> ({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?
		public Group getGroup() { return cGroup; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_0() { return cOrExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op='=>')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op='=>')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op='=>'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//'=>'
		public Keyword getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0() { return cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0; }

		//right=ImpliesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ImpliesExpr
		public RuleCall getRightImpliesExprParserRuleCall_1_1_0() { return cRightImpliesExprParserRuleCall_1_1_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpOrKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpr Expr:
		//	AndExpr (=> ({BinaryExpr.left=current} op='or') right=AndExpr)*
		@Override public ParserRule getRule() { return rule; }

		//AndExpr (=> ({BinaryExpr.left=current} op='or') right=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op='or') right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op='or')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op='or')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op='or'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//'or'
		public Keyword getOpOrKeyword_1_0_0_1_0() { return cOpOrKeyword_1_0_0_1_0; }

		//right=AndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_1_0() { return cRightAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpAndKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRelationalExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpr Expr:
		//	RelationalExpr (=> ({BinaryExpr.left=current} op='and') right=RelationalExpr)*
		@Override public ParserRule getRule() { return rule; }

		//RelationalExpr (=> ({BinaryExpr.left=current} op='and') right=RelationalExpr)*
		public Group getGroup() { return cGroup; }

		//RelationalExpr
		public RuleCall getRelationalExprParserRuleCall_0() { return cRelationalExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op='and') right=RelationalExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op='and')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op='and')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op='and'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//'and'
		public Keyword getOpAndKeyword_1_0_0_1_0() { return cOpAndKeyword_1_0_0_1_0; }

		//right=RelationalExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//RelationalExpr
		public RuleCall getRightRelationalExprParserRuleCall_1_1_0() { return cRightRelationalExprParserRuleCall_1_1_0; }
	}

	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//RelationalOp:
		//	'<' | '<=' | '>' | '>=' | '==' | '<>';
		@Override public ParserRule getRule() { return rule; }

		//'<' | '<=' | '>' | '>=' | '==' | '<>'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }

		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_5() { return cLessThanSignGreaterThanSignKeyword_5; }
	}

	public class RelationalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.RelationalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpRelationalOpParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPlusExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpr Expr:
		//	PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
		@Override public ParserRule getRule() { return rule; }

		//PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
		public Group getGroup() { return cGroup; }

		//PlusExpr
		public RuleCall getPlusExprParserRuleCall_0() { return cPlusExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=RelationalOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=RelationalOp)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=RelationalOp
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//RelationalOp
		public RuleCall getOpRelationalOpParserRuleCall_1_0_0_1_0() { return cOpRelationalOpParserRuleCall_1_0_0_1_0; }

		//right=PlusExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PlusExpr
		public RuleCall getRightPlusExprParserRuleCall_1_1_0() { return cRightPlusExprParserRuleCall_1_1_0; }
	}

	public class PlusExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.PlusExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusExpr Expr:
		//	MultExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=MultExpr)*
		@Override public ParserRule getRule() { return rule; }

		//MultExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=MultExpr)*
		public Group getGroup() { return cGroup; }

		//MultExpr
		public RuleCall getMultExprParserRuleCall_0() { return cMultExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=('+' | '-')) right=MultExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=('+' | '-'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=('+' | '-'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=('+' | '-')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('+' | '-')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_1_0_0() { return cOpPlusSignKeyword_1_0_0_1_0_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_0_1_0_1; }

		//right=MultExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultExpr
		public RuleCall getRightMultExprParserRuleCall_1_1_0() { return cRightMultExprParserRuleCall_1_1_0; }
	}

	public class MultExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.MultExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultExpr Expr:
		//	UnaryExpr (=> ({BinaryExpr.left=current} op=('*' | '/')) right=UnaryExpr)*
		@Override public ParserRule getRule() { return rule; }

		//UnaryExpr (=> ({BinaryExpr.left=current} op=('*' | '/')) right=UnaryExpr)*
		public Group getGroup() { return cGroup; }

		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=('*' | '/')) right=UnaryExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=('*' | '/'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=('*' | '/'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=('*' | '/')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('*' | '/')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'*'
		public Keyword getOpAsteriskKeyword_1_0_0_1_0_0() { return cOpAsteriskKeyword_1_0_0_1_0_0; }

		//'/'
		public Keyword getOpSolidusKeyword_1_0_0_1_0_1() { return cOpSolidusKeyword_1_0_0_1_0_1; }

		//right=UnaryExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryExpr
		public RuleCall getRightUnaryExprParserRuleCall_1_1_0() { return cRightUnaryExprParserRuleCall_1_1_0; }
	}

	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.UnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAccessExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryNegationExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprUnaryExprParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cUnaryMinusExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExprAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExprUnaryExprParserRuleCall_2_2_0 = (RuleCall)cExprAssignment_2_2.eContents().get(0);
		
		//UnaryExpr Expr:
		//	AccessExpr
		//	| {UnaryNegationExpr} 'not' expr=UnaryExpr | {UnaryMinusExpr} '-' expr=UnaryExpr
		@Override public ParserRule getRule() { return rule; }

		//AccessExpr | {UnaryNegationExpr} 'not' expr=UnaryExpr | {UnaryMinusExpr} '-' expr=UnaryExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//AccessExpr
		public RuleCall getAccessExprParserRuleCall_0() { return cAccessExprParserRuleCall_0; }

		//{UnaryNegationExpr} 'not' expr=UnaryExpr
		public Group getGroup_1() { return cGroup_1; }

		//{UnaryNegationExpr}
		public Action getUnaryNegationExprAction_1_0() { return cUnaryNegationExprAction_1_0; }

		//'not'
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }

		//expr=UnaryExpr
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }

		//UnaryExpr
		public RuleCall getExprUnaryExprParserRuleCall_1_2_0() { return cExprUnaryExprParserRuleCall_1_2_0; }

		//{UnaryMinusExpr} '-' expr=UnaryExpr
		public Group getGroup_2() { return cGroup_2; }

		//{UnaryMinusExpr}
		public Action getUnaryMinusExprAction_2_0() { return cUnaryMinusExprAction_2_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }

		//expr=UnaryExpr
		public Assignment getExprAssignment_2_2() { return cExprAssignment_2_2; }

		//UnaryExpr
		public RuleCall getExprUnaryExprParserRuleCall_2_2_0() { return cExprUnaryExprParserRuleCall_2_2_0; }
	}

	public class AccessExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.AccessExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cRecordAccessExprRecordAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cFieldAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFieldIDTerminalRuleCall_1_0_1_0 = (RuleCall)cFieldAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cRecordUpdateExprRecordAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0_0_1 = (Keyword)cGroup_1_1_0_0.eContents().get(1);
		private final Assignment cFieldAssignment_1_1_0_0_2 = (Assignment)cGroup_1_1_0_0.eContents().get(2);
		private final RuleCall cFieldIDTerminalRuleCall_1_1_0_0_2_0 = (RuleCall)cFieldAssignment_1_1_0_0_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1_0_0_3 = (Keyword)cGroup_1_1_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueExprParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cArrayAccessExprArrayAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2_0_0_1 = (Keyword)cGroup_1_2_0_0.eContents().get(1);
		private final Assignment cIndexAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cIndexExprParserRuleCall_1_2_1_0 = (RuleCall)cIndexAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_2_2_0 = (Group)cGroup_1_2_2.eContents().get(0);
		private final Group cGroup_1_2_2_0_0 = (Group)cGroup_1_2_2_0.eContents().get(0);
		private final Action cArrayUpdateExprAccessAction_1_2_2_0_0_0 = (Action)cGroup_1_2_2_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_2_2_0_0_1 = (Keyword)cGroup_1_2_2_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cValueExprParserRuleCall_1_2_2_1_0 = (RuleCall)cValueAssignment_1_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		
		//AccessExpr Expr:
		//	TerminalExpr (=> ({RecordAccessExpr.record=current} '.') field=ID
		//	| => ({RecordUpdateExpr.record=current} '{' field=ID ':=') value=Expr '}'
		//	| => ({ArrayAccessExpr.array=current} '[') index=Expr (=> ({ArrayUpdateExpr.access=current} ':=') value=Expr)? ']')*
		@Override public ParserRule getRule() { return rule; }

		//TerminalExpr (=> ({RecordAccessExpr.record=current} '.') field=ID | => ({RecordUpdateExpr.record=current} '{' field=ID
		//':=') value=Expr '}' | => ({ArrayAccessExpr.array=current} '[') index=Expr (=> ({ArrayUpdateExpr.access=current} ':=')
		//value=Expr)? ']')*
		public Group getGroup() { return cGroup; }

		//TerminalExpr
		public RuleCall getTerminalExprParserRuleCall_0() { return cTerminalExprParserRuleCall_0; }

		//(=> ({RecordAccessExpr.record=current} '.') field=ID | => ({RecordUpdateExpr.record=current} '{' field=ID ':=')
		//value=Expr '}' | => ({ArrayAccessExpr.array=current} '[') index=Expr (=> ({ArrayUpdateExpr.access=current} ':=')
		//value=Expr)? ']')*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({RecordAccessExpr.record=current} '.') field=ID
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({RecordAccessExpr.record=current} '.')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//({RecordAccessExpr.record=current} '.')
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{RecordAccessExpr.record=current}
		public Action getRecordAccessExprRecordAction_1_0_0_0_0() { return cRecordAccessExprRecordAction_1_0_0_0_0; }

		//'.'
		public Keyword getFullStopKeyword_1_0_0_0_1() { return cFullStopKeyword_1_0_0_0_1; }

		//field=ID
		public Assignment getFieldAssignment_1_0_1() { return cFieldAssignment_1_0_1; }

		//ID
		public RuleCall getFieldIDTerminalRuleCall_1_0_1_0() { return cFieldIDTerminalRuleCall_1_0_1_0; }

		//=> ({RecordUpdateExpr.record=current} '{' field=ID ':=') value=Expr '}'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({RecordUpdateExpr.record=current} '{' field=ID ':=')
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//({RecordUpdateExpr.record=current} '{' field=ID ':=')
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{RecordUpdateExpr.record=current}
		public Action getRecordUpdateExprRecordAction_1_1_0_0_0() { return cRecordUpdateExprRecordAction_1_1_0_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0_0_1() { return cLeftCurlyBracketKeyword_1_1_0_0_1; }

		//field=ID
		public Assignment getFieldAssignment_1_1_0_0_2() { return cFieldAssignment_1_1_0_0_2; }

		//ID
		public RuleCall getFieldIDTerminalRuleCall_1_1_0_0_2_0() { return cFieldIDTerminalRuleCall_1_1_0_0_2_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_1_1_0_0_3() { return cColonEqualsSignKeyword_1_1_0_0_3; }

		//value=Expr
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }

		//Expr
		public RuleCall getValueExprParserRuleCall_1_1_1_0() { return cValueExprParserRuleCall_1_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }

		//=> ({ArrayAccessExpr.array=current} '[') index=Expr (=> ({ArrayUpdateExpr.access=current} ':=') value=Expr)? ']'
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({ArrayAccessExpr.array=current} '[')
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//({ArrayAccessExpr.array=current} '[')
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{ArrayAccessExpr.array=current}
		public Action getArrayAccessExprArrayAction_1_2_0_0_0() { return cArrayAccessExprArrayAction_1_2_0_0_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_0_0_1() { return cLeftSquareBracketKeyword_1_2_0_0_1; }

		//index=Expr
		public Assignment getIndexAssignment_1_2_1() { return cIndexAssignment_1_2_1; }

		//Expr
		public RuleCall getIndexExprParserRuleCall_1_2_1_0() { return cIndexExprParserRuleCall_1_2_1_0; }

		//(=> ({ArrayUpdateExpr.access=current} ':=') value=Expr)?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//=> ({ArrayUpdateExpr.access=current} ':=')
		public Group getGroup_1_2_2_0() { return cGroup_1_2_2_0; }

		//({ArrayUpdateExpr.access=current} ':=')
		public Group getGroup_1_2_2_0_0() { return cGroup_1_2_2_0_0; }

		//{ArrayUpdateExpr.access=current}
		public Action getArrayUpdateExprAccessAction_1_2_2_0_0_0() { return cArrayUpdateExprAccessAction_1_2_2_0_0_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_1_2_2_0_0_1() { return cColonEqualsSignKeyword_1_2_2_0_0_1; }

		//value=Expr
		public Assignment getValueAssignment_1_2_2_1() { return cValueAssignment_1_2_2_1; }

		//Expr
		public RuleCall getValueExprParserRuleCall_1_2_2_1_0() { return cValueExprParserRuleCall_1_2_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2_3() { return cRightSquareBracketKeyword_1_2_3; }
	}

	public class FunctionRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.FunctionRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExternalFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExternalProcedureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocalFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLocalProcedureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FunctionRef:
		//	ExternalFunction
		//	| ExternalProcedure
		//	| LocalFunction
		//	| LocalProcedure;
		@Override public ParserRule getRule() { return rule; }

		//ExternalFunction | ExternalProcedure | LocalFunction | LocalProcedure
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExternalFunction
		public RuleCall getExternalFunctionParserRuleCall_0() { return cExternalFunctionParserRuleCall_0; }

		//ExternalProcedure
		public RuleCall getExternalProcedureParserRuleCall_1() { return cExternalProcedureParserRuleCall_1; }

		//LocalFunction
		public RuleCall getLocalFunctionParserRuleCall_2() { return cLocalFunctionParserRuleCall_2; }

		//LocalProcedure
		public RuleCall getLocalProcedureParserRuleCall_3() { return cLocalProcedureParserRuleCall_3; }
	}

	public class TerminalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.TerminalExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExprParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanLiteralExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBoolValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBoolValBOOLEANTerminalRuleCall_1_1_0 = (RuleCall)cBoolValAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntegerLiteralExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cIntValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIntValINTTerminalRuleCall_2_1_0 = (RuleCall)cIntValAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIntegerWildCardExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cAsteriskKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cRealLiteralExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cRealValAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRealValREALTerminalRuleCall_4_1_0 = (RuleCall)cRealValAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cStringLiteralExprAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cStringValAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStringValSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cStringValAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cInitExprAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cInitKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cIdAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cIdVariableRefCrossReference_6_2_0 = (CrossReference)cIdAssignment_6_2.eContents().get(0);
		private final RuleCall cIdVariableRefIDTerminalRuleCall_6_2_0_1 = (RuleCall)cIdVariableRefCrossReference_6_2_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cSecondInitAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cSecond_initKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cIdAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cIdVariableRefCrossReference_7_2_0 = (CrossReference)cIdAssignment_7_2.eContents().get(0);
		private final RuleCall cIdVariableRefIDTerminalRuleCall_7_2_0_1 = (RuleCall)cIdVariableRefCrossReference_7_2_0.eContents().get(1);
		private final RuleCall cArrayExprParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRecordExprParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cIdExprAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cIdAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cIdVariableRefCrossReference_10_1_0 = (CrossReference)cIdAssignment_10_1.eContents().get(0);
		private final RuleCall cIdVariableRefIDTerminalRuleCall_10_1_0_1 = (RuleCall)cIdVariableRefCrossReference_10_1_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cFcnCallExprAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Assignment cIdAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cIdFunctionRefCrossReference_11_1_0 = (CrossReference)cIdAssignment_11_1.eContents().get(0);
		private final RuleCall cIdFunctionRefIDTerminalRuleCall_11_1_0_1 = (RuleCall)cIdFunctionRefCrossReference_11_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cExprsAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cExprsExprListParserRuleCall_11_3_0 = (RuleCall)cExprsAssignment_11_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		
		//TerminalExpr Expr:
		//	'(' Expr ')'
		//	| {BooleanLiteralExpr} boolVal=BOOLEAN | {IntegerLiteralExpr} intVal=INT | {IntegerWildCardExpr} '*' //analysis cannot be run if this expression is present
		//	| {RealLiteralExpr} realVal=REAL | {StringLiteralExpr} stringVal=STRING | {InitExpr} 'init' id=[VariableRef] |
		//	{SecondInit} 'second_init' id=[VariableRef] | ArrayExpr
		//	| RecordExpr
		//	| {IdExpr} id=[VariableRef] | {FcnCallExpr} id=[FunctionRef] '(' exprs=ExprList ')'
		@Override public ParserRule getRule() { return rule; }

		//'(' Expr ')' | {BooleanLiteralExpr} boolVal=BOOLEAN | {IntegerLiteralExpr} intVal=INT | {IntegerWildCardExpr} '*' //analysis cannot be run if this expression is present
		//| {RealLiteralExpr} realVal=REAL | {StringLiteralExpr} stringVal=STRING | {InitExpr} 'init' id=[VariableRef] |
		//{SecondInit} 'second_init' id=[VariableRef] | ArrayExpr | RecordExpr | {IdExpr} id=[VariableRef] | {FcnCallExpr}
		//id=[FunctionRef] '(' exprs=ExprList ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'(' Expr ')'
		public Group getGroup_0() { return cGroup_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expr
		public RuleCall getExprParserRuleCall_0_1() { return cExprParserRuleCall_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{BooleanLiteralExpr} boolVal=BOOLEAN
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanLiteralExpr}
		public Action getBooleanLiteralExprAction_1_0() { return cBooleanLiteralExprAction_1_0; }

		//boolVal=BOOLEAN
		public Assignment getBoolValAssignment_1_1() { return cBoolValAssignment_1_1; }

		//BOOLEAN
		public RuleCall getBoolValBOOLEANTerminalRuleCall_1_1_0() { return cBoolValBOOLEANTerminalRuleCall_1_1_0; }

		//{IntegerLiteralExpr} intVal=INT
		public Group getGroup_2() { return cGroup_2; }

		//{IntegerLiteralExpr}
		public Action getIntegerLiteralExprAction_2_0() { return cIntegerLiteralExprAction_2_0; }

		//intVal=INT
		public Assignment getIntValAssignment_2_1() { return cIntValAssignment_2_1; }

		//INT
		public RuleCall getIntValINTTerminalRuleCall_2_1_0() { return cIntValINTTerminalRuleCall_2_1_0; }

		//{IntegerWildCardExpr} '*'
		public Group getGroup_3() { return cGroup_3; }

		//{IntegerWildCardExpr}
		public Action getIntegerWildCardExprAction_3_0() { return cIntegerWildCardExprAction_3_0; }

		//'*'
		public Keyword getAsteriskKeyword_3_1() { return cAsteriskKeyword_3_1; }

		//{RealLiteralExpr} realVal=REAL
		public Group getGroup_4() { return cGroup_4; }

		//{RealLiteralExpr}
		public Action getRealLiteralExprAction_4_0() { return cRealLiteralExprAction_4_0; }

		//realVal=REAL
		public Assignment getRealValAssignment_4_1() { return cRealValAssignment_4_1; }

		//REAL
		public RuleCall getRealValREALTerminalRuleCall_4_1_0() { return cRealValREALTerminalRuleCall_4_1_0; }

		//{StringLiteralExpr} stringVal=STRING
		public Group getGroup_5() { return cGroup_5; }

		//{StringLiteralExpr}
		public Action getStringLiteralExprAction_5_0() { return cStringLiteralExprAction_5_0; }

		//stringVal=STRING
		public Assignment getStringValAssignment_5_1() { return cStringValAssignment_5_1; }

		//STRING
		public RuleCall getStringValSTRINGTerminalRuleCall_5_1_0() { return cStringValSTRINGTerminalRuleCall_5_1_0; }

		//{InitExpr} 'init' id=[VariableRef]
		public Group getGroup_6() { return cGroup_6; }

		//{InitExpr}
		public Action getInitExprAction_6_0() { return cInitExprAction_6_0; }

		//'init'
		public Keyword getInitKeyword_6_1() { return cInitKeyword_6_1; }

		//id=[VariableRef]
		public Assignment getIdAssignment_6_2() { return cIdAssignment_6_2; }

		//[VariableRef]
		public CrossReference getIdVariableRefCrossReference_6_2_0() { return cIdVariableRefCrossReference_6_2_0; }

		//ID
		public RuleCall getIdVariableRefIDTerminalRuleCall_6_2_0_1() { return cIdVariableRefIDTerminalRuleCall_6_2_0_1; }

		//{SecondInit} 'second_init' id=[VariableRef]
		public Group getGroup_7() { return cGroup_7; }

		//{SecondInit}
		public Action getSecondInitAction_7_0() { return cSecondInitAction_7_0; }

		//'second_init'
		public Keyword getSecond_initKeyword_7_1() { return cSecond_initKeyword_7_1; }

		//id=[VariableRef]
		public Assignment getIdAssignment_7_2() { return cIdAssignment_7_2; }

		//[VariableRef]
		public CrossReference getIdVariableRefCrossReference_7_2_0() { return cIdVariableRefCrossReference_7_2_0; }

		//ID
		public RuleCall getIdVariableRefIDTerminalRuleCall_7_2_0_1() { return cIdVariableRefIDTerminalRuleCall_7_2_0_1; }

		//ArrayExpr
		public RuleCall getArrayExprParserRuleCall_8() { return cArrayExprParserRuleCall_8; }

		//RecordExpr
		public RuleCall getRecordExprParserRuleCall_9() { return cRecordExprParserRuleCall_9; }

		//{IdExpr} id=[VariableRef]
		public Group getGroup_10() { return cGroup_10; }

		//{IdExpr}
		public Action getIdExprAction_10_0() { return cIdExprAction_10_0; }

		//id=[VariableRef]
		public Assignment getIdAssignment_10_1() { return cIdAssignment_10_1; }

		//[VariableRef]
		public CrossReference getIdVariableRefCrossReference_10_1_0() { return cIdVariableRefCrossReference_10_1_0; }

		//ID
		public RuleCall getIdVariableRefIDTerminalRuleCall_10_1_0_1() { return cIdVariableRefIDTerminalRuleCall_10_1_0_1; }

		//{FcnCallExpr} id=[FunctionRef] '(' exprs=ExprList ')'
		public Group getGroup_11() { return cGroup_11; }

		//{FcnCallExpr}
		public Action getFcnCallExprAction_11_0() { return cFcnCallExprAction_11_0; }

		//id=[FunctionRef]
		public Assignment getIdAssignment_11_1() { return cIdAssignment_11_1; }

		//[FunctionRef]
		public CrossReference getIdFunctionRefCrossReference_11_1_0() { return cIdFunctionRefCrossReference_11_1_0; }

		//ID
		public RuleCall getIdFunctionRefIDTerminalRuleCall_11_1_0_1() { return cIdFunctionRefIDTerminalRuleCall_11_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_11_2() { return cLeftParenthesisKeyword_11_2; }

		//exprs=ExprList
		public Assignment getExprsAssignment_11_3() { return cExprsAssignment_11_3; }

		//ExprList
		public RuleCall getExprsExprListParserRuleCall_11_3_0() { return cExprsExprListParserRuleCall_11_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_11_4() { return cRightParenthesisKeyword_11_4; }
	}

	public class ArrayExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ArrayExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArrayDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cArrayDefinitionArrayTypeDefCrossReference_1_0 = (CrossReference)cArrayDefinitionAssignment_1.eContents().get(0);
		private final RuleCall cArrayDefinitionArrayTypeDefIDTerminalRuleCall_1_0_1 = (RuleCall)cArrayDefinitionArrayTypeDefCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprListExprParserRuleCall_3_0 = (RuleCall)cExprListAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExprListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExprListExprParserRuleCall_4_1_0 = (RuleCall)cExprListAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ArrayExpr:
		//	'array' arrayDefinition=[ArrayTypeDef] '[' exprList+=Expr (',' exprList+=Expr)* ']';
		@Override public ParserRule getRule() { return rule; }

		//'array' arrayDefinition=[ArrayTypeDef] '[' exprList+=Expr (',' exprList+=Expr)* ']'
		public Group getGroup() { return cGroup; }

		//'array'
		public Keyword getArrayKeyword_0() { return cArrayKeyword_0; }

		//arrayDefinition=[ArrayTypeDef]
		public Assignment getArrayDefinitionAssignment_1() { return cArrayDefinitionAssignment_1; }

		//[ArrayTypeDef]
		public CrossReference getArrayDefinitionArrayTypeDefCrossReference_1_0() { return cArrayDefinitionArrayTypeDefCrossReference_1_0; }

		//ID
		public RuleCall getArrayDefinitionArrayTypeDefIDTerminalRuleCall_1_0_1() { return cArrayDefinitionArrayTypeDefIDTerminalRuleCall_1_0_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//exprList+=Expr
		public Assignment getExprListAssignment_3() { return cExprListAssignment_3; }

		//Expr
		public RuleCall getExprListExprParserRuleCall_3_0() { return cExprListExprParserRuleCall_3_0; }

		//(',' exprList+=Expr)*
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//exprList+=Expr
		public Assignment getExprListAssignment_4_1() { return cExprListAssignment_4_1; }

		//Expr
		public RuleCall getExprListExprParserRuleCall_4_1_0() { return cExprListExprParserRuleCall_4_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class RecordExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.RecordExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRecordDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRecordDefinitionRecordTypeDefCrossReference_1_0 = (CrossReference)cRecordDefinitionAssignment_1.eContents().get(0);
		private final RuleCall cRecordDefinitionRecordTypeDefIDTerminalRuleCall_1_0_1 = (RuleCall)cRecordDefinitionRecordTypeDefCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldExprListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldExprListRecordFieldExprParserRuleCall_3_0 = (RuleCall)cFieldExprListAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFieldExprListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFieldExprListRecordFieldExprParserRuleCall_4_1_0 = (RuleCall)cFieldExprListAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RecordExpr:
		//	'record' recordDefinition=[RecordTypeDef] '{' fieldExprList+=RecordFieldExpr (',' fieldExprList+=RecordFieldExpr)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'record' recordDefinition=[RecordTypeDef] '{' fieldExprList+=RecordFieldExpr (',' fieldExprList+=RecordFieldExpr)* '}'
		public Group getGroup() { return cGroup; }

		//'record'
		public Keyword getRecordKeyword_0() { return cRecordKeyword_0; }

		//recordDefinition=[RecordTypeDef]
		public Assignment getRecordDefinitionAssignment_1() { return cRecordDefinitionAssignment_1; }

		//[RecordTypeDef]
		public CrossReference getRecordDefinitionRecordTypeDefCrossReference_1_0() { return cRecordDefinitionRecordTypeDefCrossReference_1_0; }

		//ID
		public RuleCall getRecordDefinitionRecordTypeDefIDTerminalRuleCall_1_0_1() { return cRecordDefinitionRecordTypeDefIDTerminalRuleCall_1_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//fieldExprList+=RecordFieldExpr
		public Assignment getFieldExprListAssignment_3() { return cFieldExprListAssignment_3; }

		//RecordFieldExpr
		public RuleCall getFieldExprListRecordFieldExprParserRuleCall_3_0() { return cFieldExprListRecordFieldExprParserRuleCall_3_0; }

		//(',' fieldExprList+=RecordFieldExpr)*
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//fieldExprList+=RecordFieldExpr
		public Assignment getFieldExprListAssignment_4_1() { return cFieldExprListAssignment_4_1; }

		//RecordFieldExpr
		public RuleCall getFieldExprListRecordFieldExprParserRuleCall_4_1_0() { return cFieldExprListRecordFieldExprParserRuleCall_4_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class RecordFieldExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.RecordFieldExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldNameIDTerminalRuleCall_0_0 = (RuleCall)cFieldNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldExprExprParserRuleCall_2_0 = (RuleCall)cFieldExprAssignment_2.eContents().get(0);
		
		//RecordFieldExpr:
		//	fieldName=ID '=' fieldExpr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//fieldName=ID '=' fieldExpr=Expr
		public Group getGroup() { return cGroup; }

		//fieldName=ID
		public Assignment getFieldNameAssignment_0() { return cFieldNameAssignment_0; }

		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_0_0() { return cFieldNameIDTerminalRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//fieldExpr=Expr
		public Assignment getFieldExprAssignment_2() { return cFieldExprAssignment_2; }

		//Expr
		public RuleCall getFieldExprExprParserRuleCall_2_0() { return cFieldExprExprParserRuleCall_2_0; }
	}

	public class ExprListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ExprList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExprListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprListExprParserRuleCall_1_0_0 = (RuleCall)cExprListAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExprListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprListExprParserRuleCall_1_1_1_0 = (RuleCall)cExprListAssignment_1_1_1.eContents().get(0);
		
		//ExprList:
		//	{ExprList} (exprList+=Expr (',' exprList+=Expr)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{ExprList} (exprList+=Expr (',' exprList+=Expr)*)?
		public Group getGroup() { return cGroup; }

		//{ExprList}
		public Action getExprListAction_0() { return cExprListAction_0; }

		//(exprList+=Expr (',' exprList+=Expr)*)?
		public Group getGroup_1() { return cGroup_1; }

		//exprList+=Expr
		public Assignment getExprListAssignment_1_0() { return cExprListAssignment_1_0; }

		//Expr
		public RuleCall getExprListExprParserRuleCall_1_0_0() { return cExprListExprParserRuleCall_1_0_0; }

		//(',' exprList+=Expr)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//exprList+=Expr
		public Assignment getExprListAssignment_1_1_1() { return cExprListAssignment_1_1_1; }

		//Expr
		public RuleCall getExprListExprParserRuleCall_1_1_1_0() { return cExprListExprParserRuleCall_1_1_1_0; }
	}

	public class ExtendedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ExtendedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTupleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeListTypeParserRuleCall_2_0 = (RuleCall)cTypeListAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeListTypeParserRuleCall_3_1_0 = (RuleCall)cTypeListAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * This section captures all of the AST objects that we include in the language, but do not
		// * allow the user to write.  They are used to make transformations to the code and simplify
		// * our tasks.
		// * / ExtendedType Type:
		//	{TupleType} '(' typeList+=Type (',' typeList+=Type)* ')'
		@Override public ParserRule getRule() { return rule; }

		//{TupleType} '(' typeList+=Type (',' typeList+=Type)* ')'
		public Group getGroup() { return cGroup; }

		//{TupleType}
		public Action getTupleTypeAction_0() { return cTupleTypeAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//typeList+=Type
		public Assignment getTypeListAssignment_2() { return cTypeListAssignment_2; }

		//Type
		public RuleCall getTypeListTypeParserRuleCall_2_0() { return cTypeListTypeParserRuleCall_2_0; }

		//(',' typeList+=Type)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//typeList+=Type
		public Assignment getTypeListAssignment_3_1() { return cTypeListAssignment_3_1; }

		//Type
		public RuleCall getTypeListTypeParserRuleCall_3_1_0() { return cTypeListTypeParserRuleCall_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ExtendedExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ExtendedExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFreshVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cCommercialAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExtendedExpr Expr:
		//	{FreshVariable} '@' value=INT '@'
		@Override public ParserRule getRule() { return rule; }

		//{FreshVariable} '@' value=INT '@'
		public Group getGroup() { return cGroup; }

		//{FreshVariable}
		public Action getFreshVariableAction_0() { return cFreshVariableAction_0; }

		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }

		//'@'
		public Keyword getCommercialAtKeyword_3() { return cCommercialAtKeyword_3; }
	}
	
	
	private final SpecificationElements pSpecification;
	private final DeclarationElements pDeclaration;
	private final CommentElements pComment;
	private final TerminalRule tSEMANTIC_COMMENT;
	private final ImportElements pImport;
	private final ExternalFunctionElements pExternalFunction;
	private final ExternalProcedureElements pExternalProcedure;
	private final LocalFunctionElements pLocalFunction;
	private final LocalProcedureElements pLocalProcedure;
	private final TypeDeclarationElements pTypeDeclaration;
	private final VarBlockElements pVarBlock;
	private final EnumTypeDefElements pEnumTypeDef;
	private final EnumValueElements pEnumValue;
	private final RecordTypeDefElements pRecordTypeDef;
	private final ArrayTypeDefElements pArrayTypeDef;
	private final AbstractTypeDefElements pAbstractTypeDef;
	private final RecordFieldTypeElements pRecordFieldType;
	private final ConstantDeclarationElements pConstantDeclaration;
	private final GlobalDeclarationElements pGlobalDeclaration;
	private final VariableRefElements pVariableRef;
	private final InputArgListElements pInputArgList;
	private final InputArgElements pInputArg;
	private final LocalArgElements pLocalArg;
	private final OutputArgListElements pOutputArgList;
	private final OutputArgElements pOutputArg;
	private final TypeElements pType;
	private final AttributeBlockElements pAttributeBlock;
	private final AttributeElements pAttribute;
	private final PreconditionElements pPrecondition;
	private final PostconditionElements pPostcondition;
	private final DefineUseRefElements pDefineUseRef;
	private final DefineElements pDefine;
	private final UsesElements pUses;
	private final StatementBlockElements pStatementBlock;
	private final StatementElements pStatement;
	private final VoidStatementElements pVoidStatement;
	private final AssignmentStatementElements pAssignmentStatement;
	private final IfThenElseStatementElements pIfThenElseStatement;
	private final ElseElements pElse;
	private final WhileStatementElements pWhileStatement;
	private final ForStatementElements pForStatement;
	private final LabelStatementElements pLabelStatement;
	private final GotoStatementElements pGotoStatement;
	private final EquationBlockElements pEquationBlock;
	private final EquationElements pEquation;
	private final IdListElements pIdList;
	private final ExprElements pExpr;
	private final IfThenElseExprElements pIfThenElseExpr;
	private final ChoiceExprElements pChoiceExpr;
	private final ImpliesExprElements pImpliesExpr;
	private final OrExprElements pOrExpr;
	private final AndExprElements pAndExpr;
	private final RelationalOpElements pRelationalOp;
	private final RelationalExprElements pRelationalExpr;
	private final PlusExprElements pPlusExpr;
	private final MultExprElements pMultExpr;
	private final UnaryExprElements pUnaryExpr;
	private final AccessExprElements pAccessExpr;
	private final FunctionRefElements pFunctionRef;
	private final TerminalExprElements pTerminalExpr;
	private final ArrayExprElements pArrayExpr;
	private final RecordExprElements pRecordExpr;
	private final RecordFieldExprElements pRecordFieldExpr;
	private final ExprListElements pExprList;
	private final TerminalRule tINT;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tREAL;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	private final ExtendedTypeElements pExtendedType;
	private final ExtendedExprElements pExtendedExpr;
	
	private final Grammar grammar;

	@Inject
	public LimpGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pSpecification = new SpecificationElements();
		this.pDeclaration = new DeclarationElements();
		this.pComment = new CommentElements();
		this.tSEMANTIC_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.SEMANTIC_COMMENT");
		this.pImport = new ImportElements();
		this.pExternalFunction = new ExternalFunctionElements();
		this.pExternalProcedure = new ExternalProcedureElements();
		this.pLocalFunction = new LocalFunctionElements();
		this.pLocalProcedure = new LocalProcedureElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pVarBlock = new VarBlockElements();
		this.pEnumTypeDef = new EnumTypeDefElements();
		this.pEnumValue = new EnumValueElements();
		this.pRecordTypeDef = new RecordTypeDefElements();
		this.pArrayTypeDef = new ArrayTypeDefElements();
		this.pAbstractTypeDef = new AbstractTypeDefElements();
		this.pRecordFieldType = new RecordFieldTypeElements();
		this.pConstantDeclaration = new ConstantDeclarationElements();
		this.pGlobalDeclaration = new GlobalDeclarationElements();
		this.pVariableRef = new VariableRefElements();
		this.pInputArgList = new InputArgListElements();
		this.pInputArg = new InputArgElements();
		this.pLocalArg = new LocalArgElements();
		this.pOutputArgList = new OutputArgListElements();
		this.pOutputArg = new OutputArgElements();
		this.pType = new TypeElements();
		this.pAttributeBlock = new AttributeBlockElements();
		this.pAttribute = new AttributeElements();
		this.pPrecondition = new PreconditionElements();
		this.pPostcondition = new PostconditionElements();
		this.pDefineUseRef = new DefineUseRefElements();
		this.pDefine = new DefineElements();
		this.pUses = new UsesElements();
		this.pStatementBlock = new StatementBlockElements();
		this.pStatement = new StatementElements();
		this.pVoidStatement = new VoidStatementElements();
		this.pAssignmentStatement = new AssignmentStatementElements();
		this.pIfThenElseStatement = new IfThenElseStatementElements();
		this.pElse = new ElseElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pLabelStatement = new LabelStatementElements();
		this.pGotoStatement = new GotoStatementElements();
		this.pEquationBlock = new EquationBlockElements();
		this.pEquation = new EquationElements();
		this.pIdList = new IdListElements();
		this.pExpr = new ExprElements();
		this.pIfThenElseExpr = new IfThenElseExprElements();
		this.pChoiceExpr = new ChoiceExprElements();
		this.pImpliesExpr = new ImpliesExprElements();
		this.pOrExpr = new OrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pRelationalOp = new RelationalOpElements();
		this.pRelationalExpr = new RelationalExprElements();
		this.pPlusExpr = new PlusExprElements();
		this.pMultExpr = new MultExprElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pAccessExpr = new AccessExprElements();
		this.pFunctionRef = new FunctionRefElements();
		this.pTerminalExpr = new TerminalExprElements();
		this.pArrayExpr = new ArrayExprElements();
		this.pRecordExpr = new RecordExprElements();
		this.pRecordFieldExpr = new RecordFieldExprElements();
		this.pExprList = new ExprListElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.INT");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.BOOLEAN");
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.REAL");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.Limp.ANY_OTHER");
		this.pExtendedType = new ExtendedTypeElements();
		this.pExtendedExpr = new ExtendedExprElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.rockwellcollins.atc.Limp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Specification:
	//	declarations+=Declaration*;
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	//Declaration:
	//	Import
	//	| Comment
	//	| ExternalFunction
	//	| ExternalProcedure
	//	| LocalFunction
	//	| LocalProcedure
	//	| ConstantDeclaration
	//	| GlobalDeclaration
	//	| TypeDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Comment:
	//	comment=SEMANTIC_COMMENT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//terminal SEMANTIC_COMMENT:
	//	'/#'->'#/';
	public TerminalRule getSEMANTIC_COMMENTRule() {
		return tSEMANTIC_COMMENT;
	} 

	//Import:
	//	'import' importURI=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ExternalFunction:
	//	'external' 'function' name=ID '(' inputs=InputArgList ')' 'returns' '(' output=OutputArg ')';
	public ExternalFunctionElements getExternalFunctionAccess() {
		return pExternalFunction;
	}
	
	public ParserRule getExternalFunctionRule() {
		return getExternalFunctionAccess().getRule();
	}

	//ExternalProcedure:
	//	'external' 'procedure' name=ID '(' inputs=InputArgList ')' 'returns' '(' outputs=OutputArgList ')'
	//	attributeBlock=AttributeBlock;
	public ExternalProcedureElements getExternalProcedureAccess() {
		return pExternalProcedure;
	}
	
	public ParserRule getExternalProcedureRule() {
		return getExternalProcedureAccess().getRule();
	}

	//LocalFunction:
	//	'function' name=ID '(' inputs=InputArgList ')' 'returns' '(' output=OutputArg ')'
	//	varBlock=VarBlock 'equations' equationBlock=EquationBlock;
	public LocalFunctionElements getLocalFunctionAccess() {
		return pLocalFunction;
	}
	
	public ParserRule getLocalFunctionRule() {
		return getLocalFunctionAccess().getRule();
	}

	//LocalProcedure:
	//	'procedure' name=ID '(' inputs=InputArgList ')' 'returns' '(' outputs=OutputArgList ')'
	//	varBlock=VarBlock attributeBlock=AttributeBlock 'statements' statementblock=StatementBlock;
	public LocalProcedureElements getLocalProcedureAccess() {
		return pLocalProcedure;
	}
	
	public ParserRule getLocalProcedureRule() {
		return getLocalProcedureAccess().getRule();
	}

	//TypeDeclaration:
	//	{TypeAlias} 'type' name=ID '=' type=Type | EnumTypeDef
	//	| RecordTypeDef
	//	| ArrayTypeDef
	//	| AbstractTypeDef;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//VarBlock:
	//	{SomeVarBlock} 'var' '{' locals+=LocalArg* '}'
	//	| {NoVarBlock};
	public VarBlockElements getVarBlockAccess() {
		return pVarBlock;
	}
	
	public ParserRule getVarBlockRule() {
		return getVarBlockAccess().getRule();
	}

	//EnumTypeDef:
	//	'type' 'enum' name=ID '=' '{' enumerations+=EnumValue (',' enumerations+=EnumValue)* '}';
	public EnumTypeDefElements getEnumTypeDefAccess() {
		return pEnumTypeDef;
	}
	
	public ParserRule getEnumTypeDefRule() {
		return getEnumTypeDefAccess().getRule();
	}

	//EnumValue:
	//	{EnumValue} name=ID;
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}

	//RecordTypeDef:
	//	'type' 'record' name=ID '=' '{' fields+=RecordFieldType (',' fields+=RecordFieldType)* '}';
	public RecordTypeDefElements getRecordTypeDefAccess() {
		return pRecordTypeDef;
	}
	
	public ParserRule getRecordTypeDefRule() {
		return getRecordTypeDefAccess().getRule();
	}

	//ArrayTypeDef:
	//	'type' 'array' name=ID '=' baseType=Type '[' size=INT ']';
	public ArrayTypeDefElements getArrayTypeDefAccess() {
		return pArrayTypeDef;
	}
	
	public ParserRule getArrayTypeDefRule() {
		return getArrayTypeDefAccess().getRule();
	}

	//AbstractTypeDef:
	//	'type' 'abstract' name=ID;
	public AbstractTypeDefElements getAbstractTypeDefAccess() {
		return pAbstractTypeDef;
	}
	
	public ParserRule getAbstractTypeDefRule() {
		return getAbstractTypeDefAccess().getRule();
	}

	//RecordFieldType:
	//	fieldName=ID ':' fieldType=Type;
	public RecordFieldTypeElements getRecordFieldTypeAccess() {
		return pRecordFieldType;
	}
	
	public ParserRule getRecordFieldTypeRule() {
		return getRecordFieldTypeAccess().getRule();
	}

	//ConstantDeclaration:
	//	'constant' name=ID ':' type=Type ('=' expr=Expr)?;
	public ConstantDeclarationElements getConstantDeclarationAccess() {
		return pConstantDeclaration;
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}

	//GlobalDeclaration:
	//	'global' name=ID ':' type=Type;
	public GlobalDeclarationElements getGlobalDeclarationAccess() {
		return pGlobalDeclaration;
	}
	
	public ParserRule getGlobalDeclarationRule() {
		return getGlobalDeclarationAccess().getRule();
	}

	//VariableRef:
	//	InputArg
	//	| LocalArg
	//	| OutputArg
	//	| ConstantDeclaration
	//	| GlobalDeclaration
	//	| EnumValue;
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}

	//InputArgList:
	//	{InputArgList} (inputArgs+=InputArg (',' inputArgs+=InputArg)*)?;
	public InputArgListElements getInputArgListAccess() {
		return pInputArgList;
	}
	
	public ParserRule getInputArgListRule() {
		return getInputArgListAccess().getRule();
	}

	//InputArg:
	//	name=ID ':' type=Type;
	public InputArgElements getInputArgAccess() {
		return pInputArg;
	}
	
	public ParserRule getInputArgRule() {
		return getInputArgAccess().getRule();
	}

	//LocalArg:
	//	name=ID ':' type=Type ';';
	public LocalArgElements getLocalArgAccess() {
		return pLocalArg;
	}
	
	public ParserRule getLocalArgRule() {
		return getLocalArgAccess().getRule();
	}

	//OutputArgList:
	//	{OutputArgList} (outputArgs+=OutputArg (',' outputArgs+=OutputArg)*)?;
	public OutputArgListElements getOutputArgListAccess() {
		return pOutputArgList;
	}
	
	public ParserRule getOutputArgListRule() {
		return getOutputArgListAccess().getRule();
	}

	//OutputArg:
	//	name=ID ':' type=Type;
	public OutputArgElements getOutputArgAccess() {
		return pOutputArg;
	}
	
	public ParserRule getOutputArgRule() {
		return getOutputArgAccess().getRule();
	}

	//Type:
	//	{VoidType} 'void'
	//	| {BoolType} 'bool'
	//	| {IntegerType} 'int'
	//	| {RealType} 'real'
	//	| {StringType} 'string'
	//	| {EnumType} 'enum' enumDef=[EnumTypeDef] | {RecordType} 'record' recordDef=[RecordTypeDef] | {ArrayType} 'array'
	//	arrayDef=[ArrayTypeDef] | {AbstractType} 'abstract' abstractDef=[AbstractTypeDef] | {NamedType} alias=[TypeAlias];
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//AttributeBlock:
	//	{SomeAttributeBlock} 'attributes' '{' attributeList+=Attribute* '}'
	//	| {NoAttributeBlock};
	public AttributeBlockElements getAttributeBlockAccess() {
		return pAttributeBlock;
	}
	
	public ParserRule getAttributeBlockRule() {
		return getAttributeBlockAccess().getRule();
	}

	//Attribute:
	//	Precondition
	//	| Postcondition
	//	| Define
	//	| Uses;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Precondition:
	//	'precondition' name=ID '=' expr=Expr ';';
	public PreconditionElements getPreconditionAccess() {
		return pPrecondition;
	}
	
	public ParserRule getPreconditionRule() {
		return getPreconditionAccess().getRule();
	}

	//Postcondition:
	//	'postcondition' name=ID '=' expr=Expr ';';
	public PostconditionElements getPostconditionAccess() {
		return pPostcondition;
	}
	
	public ParserRule getPostconditionRule() {
		return getPostconditionAccess().getRule();
	}

	//DefineUseRef:
	//	referenceExpr=Expr;
	public DefineUseRefElements getDefineUseRefAccess() {
		return pDefineUseRef;
	}
	
	public ParserRule getDefineUseRefRule() {
		return getDefineUseRefAccess().getRule();
	}

	//Define:
	//	'defines' elements+=DefineUseRef (',' elements+=DefineUseRef)* ';';
	public DefineElements getDefineAccess() {
		return pDefine;
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}

	//Uses:
	//	'uses' elements+=DefineUseRef (',' elements+=DefineUseRef)* ';';
	public UsesElements getUsesAccess() {
		return pUses;
	}
	
	public ParserRule getUsesRule() {
		return getUsesAccess().getRule();
	}

	//StatementBlock:
	//	{StatementBlock} '{' statements+=Statement* '}';
	public StatementBlockElements getStatementBlockAccess() {
		return pStatementBlock;
	}
	
	public ParserRule getStatementBlockRule() {
		return getStatementBlockAccess().getRule();
	}

	//Statement:
	//	VoidStatement
	//	| AssignmentStatement
	//	| IfThenElseStatement
	//	| WhileStatement
	//	| ForStatement
	//	| GotoStatement
	//	| LabelStatement
	//	| {BreakStatement} 'break' ';'
	//	| {ContinueStatement} 'continue' ';'
	//	| {ReturnStatement} 'return' ';';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//VoidStatement:
	//	expr=Expr ';';
	public VoidStatementElements getVoidStatementAccess() {
		return pVoidStatement;
	}
	
	public ParserRule getVoidStatementRule() {
		return getVoidStatementAccess().getRule();
	}

	//AssignmentStatement:
	//	ids=IdList '=' rhs=Expr ';';
	public AssignmentStatementElements getAssignmentStatementAccess() {
		return pAssignmentStatement;
	}
	
	public ParserRule getAssignmentStatementRule() {
		return getAssignmentStatementAccess().getRule();
	}

	//IfThenElseStatement:
	//	'if' cond=Expr 'then' thenBlock=StatementBlock else=Else;
	public IfThenElseStatementElements getIfThenElseStatementAccess() {
		return pIfThenElseStatement;
	}
	
	public ParserRule getIfThenElseStatementRule() {
		return getIfThenElseStatementAccess().getRule();
	}

	//Else:
	//	{ElseBlock} 'else' block=StatementBlock | {ElseIf} 'else' ifThenElse=IfThenElseStatement | {NoElse};
	public ElseElements getElseAccess() {
		return pElse;
	}
	
	public ParserRule getElseRule() {
		return getElseAccess().getRule();
	}

	//WhileStatement:
	//	'while' cond=Expr block=StatementBlock;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//ForStatement:
	//	'for' '(' initStatement=AssignmentStatement limitExpr=Expr ';' incrementStatement=AssignmentStatement ')'
	//	block=StatementBlock;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//LabelStatement:
	//	'label' name=ID ';';
	public LabelStatementElements getLabelStatementAccess() {
		return pLabelStatement;
	}
	
	public ParserRule getLabelStatementRule() {
		return getLabelStatementAccess().getRule();
	}

	//GotoStatement:
	//	{GotoStatement} 'goto' label=[LabelStatement] ('when' whenExpr=Expr)? ';';
	public GotoStatementElements getGotoStatementAccess() {
		return pGotoStatement;
	}
	
	public ParserRule getGotoStatementRule() {
		return getGotoStatementAccess().getRule();
	}

	//EquationBlock:
	//	{EquationBlock} '{' equations+=Equation* '}';
	public EquationBlockElements getEquationBlockAccess() {
		return pEquationBlock;
	}
	
	public ParserRule getEquationBlockRule() {
		return getEquationBlockAccess().getRule();
	}

	//Equation:
	//	VoidStatement
	//	| AssignmentStatement;
	public EquationElements getEquationAccess() {
		return pEquation;
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	//IdList:
	//	ids+=[VariableRef] (',' ids+=[VariableRef])*;
	public IdListElements getIdListAccess() {
		return pIdList;
	}
	
	public ParserRule getIdListRule() {
		return getIdListAccess().getRule();
	}

	//Expr:
	//	IfThenElseExpr;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//IfThenElseExpr Expr:
	//	ChoiceExpr (=> ({IfThenElseExpr.condExpr=current} '?') thenExpr=Expr ':' elseExpr=Expr)?
	public IfThenElseExprElements getIfThenElseExprAccess() {
		return pIfThenElseExpr;
	}
	
	public ParserRule getIfThenElseExprRule() {
		return getIfThenElseExprAccess().getRule();
	}

	//ChoiceExpr Expr:
	//	{ChoiceExpr} 'choice' '(' first=Expr ',' second=Expr ')' //analysis cannot be run if a spec contains this
	//	| ImpliesExpr
	public ChoiceExprElements getChoiceExprAccess() {
		return pChoiceExpr;
	}
	
	public ParserRule getChoiceExprRule() {
		return getChoiceExprAccess().getRule();
	}

	//ImpliesExpr Expr:
	//	OrExpr (=> ({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?
	public ImpliesExprElements getImpliesExprAccess() {
		return pImpliesExpr;
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//OrExpr Expr:
	//	AndExpr (=> ({BinaryExpr.left=current} op='or') right=AndExpr)*
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr Expr:
	//	RelationalExpr (=> ({BinaryExpr.left=current} op='and') right=RelationalExpr)*
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//RelationalOp:
	//	'<' | '<=' | '>' | '>=' | '==' | '<>';
	public RelationalOpElements getRelationalOpAccess() {
		return pRelationalOp;
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}

	//RelationalExpr Expr:
	//	PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
	public RelationalExprElements getRelationalExprAccess() {
		return pRelationalExpr;
	}
	
	public ParserRule getRelationalExprRule() {
		return getRelationalExprAccess().getRule();
	}

	//PlusExpr Expr:
	//	MultExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=MultExpr)*
	public PlusExprElements getPlusExprAccess() {
		return pPlusExpr;
	}
	
	public ParserRule getPlusExprRule() {
		return getPlusExprAccess().getRule();
	}

	//MultExpr Expr:
	//	UnaryExpr (=> ({BinaryExpr.left=current} op=('*' | '/')) right=UnaryExpr)*
	public MultExprElements getMultExprAccess() {
		return pMultExpr;
	}
	
	public ParserRule getMultExprRule() {
		return getMultExprAccess().getRule();
	}

	//UnaryExpr Expr:
	//	AccessExpr
	//	| {UnaryNegationExpr} 'not' expr=UnaryExpr | {UnaryMinusExpr} '-' expr=UnaryExpr
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}

	//AccessExpr Expr:
	//	TerminalExpr (=> ({RecordAccessExpr.record=current} '.') field=ID
	//	| => ({RecordUpdateExpr.record=current} '{' field=ID ':=') value=Expr '}'
	//	| => ({ArrayAccessExpr.array=current} '[') index=Expr (=> ({ArrayUpdateExpr.access=current} ':=') value=Expr)? ']')*
	public AccessExprElements getAccessExprAccess() {
		return pAccessExpr;
	}
	
	public ParserRule getAccessExprRule() {
		return getAccessExprAccess().getRule();
	}

	//FunctionRef:
	//	ExternalFunction
	//	| ExternalProcedure
	//	| LocalFunction
	//	| LocalProcedure;
	public FunctionRefElements getFunctionRefAccess() {
		return pFunctionRef;
	}
	
	public ParserRule getFunctionRefRule() {
		return getFunctionRefAccess().getRule();
	}

	//TerminalExpr Expr:
	//	'(' Expr ')'
	//	| {BooleanLiteralExpr} boolVal=BOOLEAN | {IntegerLiteralExpr} intVal=INT | {IntegerWildCardExpr} '*' //analysis cannot be run if this expression is present
	//	| {RealLiteralExpr} realVal=REAL | {StringLiteralExpr} stringVal=STRING | {InitExpr} 'init' id=[VariableRef] |
	//	{SecondInit} 'second_init' id=[VariableRef] | ArrayExpr
	//	| RecordExpr
	//	| {IdExpr} id=[VariableRef] | {FcnCallExpr} id=[FunctionRef] '(' exprs=ExprList ')'
	public TerminalExprElements getTerminalExprAccess() {
		return pTerminalExpr;
	}
	
	public ParserRule getTerminalExprRule() {
		return getTerminalExprAccess().getRule();
	}

	//ArrayExpr:
	//	'array' arrayDefinition=[ArrayTypeDef] '[' exprList+=Expr (',' exprList+=Expr)* ']';
	public ArrayExprElements getArrayExprAccess() {
		return pArrayExpr;
	}
	
	public ParserRule getArrayExprRule() {
		return getArrayExprAccess().getRule();
	}

	//RecordExpr:
	//	'record' recordDefinition=[RecordTypeDef] '{' fieldExprList+=RecordFieldExpr (',' fieldExprList+=RecordFieldExpr)*
	//	'}';
	public RecordExprElements getRecordExprAccess() {
		return pRecordExpr;
	}
	
	public ParserRule getRecordExprRule() {
		return getRecordExprAccess().getRule();
	}

	//RecordFieldExpr:
	//	fieldName=ID '=' fieldExpr=Expr;
	public RecordFieldExprElements getRecordFieldExprAccess() {
		return pRecordFieldExpr;
	}
	
	public ParserRule getRecordFieldExprRule() {
		return getRecordFieldExprAccess().getRule();
	}

	//ExprList:
	//	{ExprList} (exprList+=Expr (',' exprList+=Expr)*)?;
	public ExprListElements getExprListAccess() {
		return pExprList;
	}
	
	public ParserRule getExprListRule() {
		return getExprListAccess().getRule();
	}

	//terminal INT returns ecore::EBigInteger:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal BOOLEAN:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal REAL:
	//	INT '.' INT;
	public TerminalRule getREALRule() {
		return tREAL;
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 

	/// * This section captures all of the AST objects that we include in the language, but do not
	// * allow the user to write.  They are used to make transformations to the code and simplify
	// * our tasks.
	// * / ExtendedType Type:
	//	{TupleType} '(' typeList+=Type (',' typeList+=Type)* ')'
	public ExtendedTypeElements getExtendedTypeAccess() {
		return pExtendedType;
	}
	
	public ParserRule getExtendedTypeRule() {
		return getExtendedTypeAccess().getRule();
	}

	//ExtendedExpr Expr:
	//	{FreshVariable} '@' value=INT '@'
	public ExtendedExprElements getExtendedExprAccess() {
		return pExtendedExpr;
	}
	
	public ParserRule getExtendedExprRule() {
		return getExtendedExprAccess().getRule();
	}
}
